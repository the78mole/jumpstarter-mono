# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import router_pb2 as jumpstarter_dot_v1_dot_router__pb2


class RouterServiceStub(object):
    """StreamService
    Claims:
    iss: jumpstarter controller
    aud: jumpstarter router
    sub: jumpstarter client/exporter
    stream: stream id
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Stream = channel.stream_stream(
                '/jumpstarter.v1.RouterService/Stream',
                request_serializer=jumpstarter_dot_v1_dot_router__pb2.StreamRequest.SerializeToString,
                response_deserializer=jumpstarter_dot_v1_dot_router__pb2.StreamResponse.FromString,
                _registered_method=True)


class RouterServiceServicer(object):
    """StreamService
    Claims:
    iss: jumpstarter controller
    aud: jumpstarter router
    sub: jumpstarter client/exporter
    stream: stream id
    """

    def Stream(self, request_iterator, context):
        """Stream connects caller to another caller of the same stream
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RouterServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Stream': grpc.stream_stream_rpc_method_handler(
                    servicer.Stream,
                    request_deserializer=jumpstarter_dot_v1_dot_router__pb2.StreamRequest.FromString,
                    response_serializer=jumpstarter_dot_v1_dot_router__pb2.StreamResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'jumpstarter.v1.RouterService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('jumpstarter.v1.RouterService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class RouterService(object):
    """StreamService
    Claims:
    iss: jumpstarter controller
    aud: jumpstarter router
    sub: jumpstarter client/exporter
    stream: stream id
    """

    @staticmethod
    def Stream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/jumpstarter.v1.RouterService/Stream',
            jumpstarter_dot_v1_dot_router__pb2.StreamRequest.SerializeToString,
            jumpstarter_dot_v1_dot_router__pb2.StreamResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
