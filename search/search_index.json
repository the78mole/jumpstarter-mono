{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Jumpstarter Monorepo Documentation","text":"<p>Welcome to the Jumpstarter monorepo documentation. This unified repository contains all Jumpstarter components in a single, manageable structure.</p>"},{"location":"#overview","title":"Overview","text":"<p>The Jumpstarter monorepo brings together:</p> <ul> <li>Core Components: Main library, controller, and protocol definitions</li> <li>Hardware: DUT link board designs and firmware</li> <li>Packages: Distribution packages for various platforms</li> <li>Integrations: CI/CD tooling and development environment integrations</li> <li>Templates: Scaffolding for driver development</li> <li>Testing: Comprehensive testing infrastructure</li> </ul>"},{"location":"#quick-navigation","title":"Quick Navigation","text":"<ul> <li>Installation Guide - Get started with Jumpstarter</li> <li>Development Guide - Contribute to the project</li> <li>Architecture - Understand the system design</li> <li>User Guide - Learn how to use Jumpstarter</li> <li>Hardware - Hardware components and specifications</li> <li>Integrations - CI/CD and tooling integrations</li> </ul>"},{"location":"#repository-structure","title":"Repository Structure","text":"<p>The monorepo is organized into logical components:</p> <pre><code>graph TB\n    subgraph \"Jumpstarter Monorepo\"\n        ROOT[jumpstarter-mono/]\n\n        subgraph \"Core Platform\"\n            CORE[core/]\n            CORE_JS[\u251c\u2500\u2500 jumpstarter/&lt;br/&gt;\u2502   Python Library &amp; CLI]\n            CORE_CTL[\u251c\u2500\u2500 controller/&lt;br/&gt;\u2502   Kubernetes Controller Go]\n            CORE_PROTO[\u2514\u2500\u2500 protocol/&lt;br/&gt;    Protocol Definitions]\n        end\n\n        subgraph \"Hardware\"\n            HW[hardware/]\n            HW_BOARD[\u251c\u2500\u2500 dutlink-board/&lt;br/&gt;\u2502   PCB Design Files]\n            HW_FW[\u2514\u2500\u2500 dutlink-firmware/&lt;br/&gt;    Rust Firmware]\n        end\n\n        subgraph \"Distribution\"\n            PKG[packages/]\n            PKG_PY[\u251c\u2500\u2500 python/]\n            PKG_DEB[\u251c\u2500\u2500 debian/]\n            PKG_RPM[\u251c\u2500\u2500 rpm/]\n            PKG_CONT[\u2514\u2500\u2500 container/]\n        end\n\n        subgraph \"Integration &amp; Tools\"\n            INT[integrations/]\n            INT_TEK[\u251c\u2500\u2500 tekton/]\n            INT_VS[\u251c\u2500\u2500 vscode/]\n            INT_DEV[\u2514\u2500\u2500 devspace/]\n\n            TMPL[templates/]\n            TMPL_DRV[\u2514\u2500\u2500 driver/]\n\n            TEST[testing/]\n            TEST_E2E[\u251c\u2500\u2500 e2e/]\n            TEST_INT[\u251c\u2500\u2500 integration/]\n            TEST_FIX[\u2514\u2500\u2500 fixtures/]\n        end\n\n        subgraph \"Configuration &amp; Docs\"\n            LAB[lab-config/]\n            DOCS[docs/]\n            TOOLS[tools/]\n            SCRIPTS[scripts/]\n        end\n    end\n\n    ROOT --&gt; CORE\n    CORE --&gt; CORE_JS\n    CORE --&gt; CORE_CTL\n    CORE --&gt; CORE_PROTO\n\n    ROOT --&gt; HW\n    HW --&gt; HW_BOARD\n    HW --&gt; HW_FW\n\n    ROOT --&gt; PKG\n    PKG --&gt; PKG_PY\n    PKG --&gt; PKG_DEB\n    PKG --&gt; PKG_RPM\n    PKG --&gt; PKG_CONT\n\n    ROOT --&gt; INT\n    INT --&gt; INT_TEK\n    INT --&gt; INT_VS\n    INT --&gt; INT_DEV\n\n    ROOT --&gt; TMPL\n    TMPL --&gt; TMPL_DRV\n\n    ROOT --&gt; TEST\n    TEST --&gt; TEST_E2E\n    TEST --&gt; TEST_INT\n    TEST --&gt; TEST_FIX\n\n    ROOT --&gt; LAB\n    ROOT --&gt; DOCS\n    ROOT --&gt; TOOLS\n    ROOT --&gt; SCRIPTS\n\n    style ROOT fill:#e8f5e8\n    style CORE fill:#e1f5fe\n    style HW fill:#fff3e0\n    style PKG fill:#f3e5f5\n    style INT fill:#ffebee</code></pre>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To get started with development:</p> <pre><code># Clone the repository\ngit clone https://github.com/the78mole/jumpstarter-mono.git\ncd jumpstarter-mono\n\n# Setup development environment\nmake setup\n\n# View available commands\nmake help\n</code></pre> <p>For detailed instructions, see the Installation Guide.</p>"},{"location":"architecture/","title":"Architecture","text":"<p>This document describes the overall architecture of the Jumpstarter monorepo and how components interact.</p>"},{"location":"architecture/#system-overview","title":"System Overview","text":"<p>The Jumpstarter system consists of multiple components working together to provide a comprehensive testing and automation platform.</p> <pre><code>graph TB\n    subgraph \"User Interface\"\n        CLI[CLI Tools]\n        API[REST API]\n        WEB[Web Interface]\n    end\n\n    subgraph \"Core Platform\"\n        LIB[Jumpstarter Library&lt;br/&gt;Python]\n        CTL[Kubernetes Controller&lt;br/&gt;Go]\n        PROTO[Protocol Definitions&lt;br/&gt;Protocol Buffers]\n        EXPORTER[Exporter CLI&lt;br/&gt;Data Export Tool]\n    end\n\n    subgraph \"Hardware Layer\"\n        FW[DUTLink Firmware&lt;br/&gt;Rust]\n        HW[DUTLink Board&lt;br/&gt;Hardware]\n        DUT[Device Under Test]\n    end\n\n    subgraph \"Integration &amp; Tooling\"\n        TEKTON[Tekton CI/CD]\n        VSCODE[VS Code Extension]\n        DEV[DevSpace Templates]\n    end\n\n    subgraph \"Testing Infrastructure\"\n        E2E[End-to-End Tests]\n        INT[Integration Tests]\n        UNIT[Unit Tests]\n    end\n\n    CLI --&gt; LIB\n    API --&gt; LIB\n    WEB --&gt; LIB\n\n    LIB &lt;--&gt; CTL\n    LIB &lt;--&gt; PROTO\n    CTL &lt;--&gt; PROTO\n\n    LIB --&gt; FW\n    FW --&gt; HW\n    HW --&gt; DUT\n\n    EXPORTER --&gt; LIB\n    EXPORTER --&gt; HW\n\n    TEKTON --&gt; CTL\n    VSCODE --&gt; LIB\n    DEV --&gt; LIB\n\n    E2E --&gt; LIB\n    INT --&gt; LIB\n    UNIT --&gt; LIB\n\n    style LIB fill:#e1f5fe\n    style CTL fill:#f3e5f5\n    style FW fill:#fff3e0\n    style HW fill:#ffebee\n    style EXPORTER fill:#f0f4c3</code></pre>"},{"location":"architecture/#component-architecture","title":"Component Architecture","text":""},{"location":"architecture/#core-components","title":"Core Components","text":""},{"location":"architecture/#jumpstarter-library-corejumpstarter","title":"Jumpstarter Library (<code>core/jumpstarter/</code>)","text":"<ul> <li>Main Python library and CLI</li> <li>Provides core functionality and APIs</li> <li>Plugin system for extensibility</li> </ul>"},{"location":"architecture/#controller-corecontroller","title":"Controller (<code>core/controller/</code>)","text":"<ul> <li>Kubernetes controller written in Go</li> <li>Manages test environments and resources</li> <li>Handles orchestration and scheduling</li> </ul>"},{"location":"architecture/#protocol-coreprotocol","title":"Protocol (<code>core/protocol/</code>)","text":"<ul> <li>Communication protocol definitions</li> <li>Shared data structures</li> <li>API specifications</li> </ul>"},{"location":"architecture/#hardware-components","title":"Hardware Components","text":""},{"location":"architecture/#dut-link-firmware-hardwaredutlink-firmware","title":"DUT Link Firmware (<code>hardware/dutlink-firmware/</code>)","text":"<ul> <li>Rust-based firmware for hardware control</li> <li>Low-level device interaction</li> <li>Real-time communication protocols</li> </ul>"},{"location":"architecture/#dut-link-board-hardwaredutlink-board","title":"DUT Link Board (<code>hardware/dutlink-board/</code>)","text":"<ul> <li>Hardware design files</li> <li>PCB layouts and schematics</li> <li>Component specifications</li> </ul>"},{"location":"architecture/#monorepo-build-architecture","title":"Monorepo Build Architecture","text":"<p>The monorepo uses a unified build system that coordinates between different technologies:</p> <pre><code>graph TD\n    subgraph \"Language Ecosystems\"\n        PY[Python Components&lt;br/&gt;core/jumpstarter&lt;br/&gt;templates/driver]\n        GO[Go Components&lt;br/&gt;core/controller&lt;br/&gt;lab-config]\n        RUST[Rust Components&lt;br/&gt;hardware/dutlink-firmware]\n        TS[TypeScript Components&lt;br/&gt;integrations/vscode]\n    end\n\n    subgraph \"Build Tools\"\n        UV[UV Package Manager&lt;br/&gt;Python Workspace]\n        GOWORK[Go Workspace&lt;br/&gt;go.work]\n        CARGO[Cargo&lt;br/&gt;Rust Build]\n        NPM[NPM&lt;br/&gt;Node.js Build]\n    end\n\n    subgraph \"Unified Orchestration\"\n        MAKE[Root Makefile&lt;br/&gt;40+ Build Targets]\n        CI[GitHub Actions&lt;br/&gt;Multi-language CI]\n    end\n\n    subgraph \"Output Artifacts\"\n        WHEELS[Python Wheels]\n        BINS[Go Binaries]\n        FIRMWARE[Rust Firmware]\n        EXTENSION[VS Code Extension]\n        CONTAINERS[Container Images]\n        PACKAGES[Distribution Packages]\n    end\n\n    PY --&gt; UV\n    GO --&gt; GOWORK\n    RUST --&gt; CARGO\n    TS --&gt; NPM\n\n    UV --&gt; MAKE\n    GOWORK --&gt; MAKE\n    CARGO --&gt; MAKE\n    NPM --&gt; MAKE\n\n    MAKE --&gt; CI\n\n    MAKE --&gt; WHEELS\n    MAKE --&gt; BINS\n    MAKE --&gt; FIRMWARE\n    MAKE --&gt; EXTENSION\n    MAKE --&gt; CONTAINERS\n    MAKE --&gt; PACKAGES\n\n    style MAKE fill:#e8f5e8\n    style CI fill:#fff9c4</code></pre>"},{"location":"architecture/#design-principles","title":"Design Principles","text":"<ol> <li>Modularity: Each component can be developed and tested independently</li> <li>Consistency: Unified build, test, and deployment processes</li> <li>Scalability: Components can scale independently</li> <li>Maintainability: Clear separation of concerns</li> <li>Extensibility: Plugin architecture for custom functionality</li> </ol>"},{"location":"architecture/#data-flow-architecture","title":"Data Flow Architecture","text":"<pre><code>sequenceDiagram\n    participant User\n    participant CLI\n    participant Library\n    participant Controller\n    participant Router\n    participant Firmware\n    participant Hardware\n    participant DUT\n\n    User-&gt;&gt;CLI: Execute test command\n    CLI-&gt;&gt;Library: Parse and validate\n    Library-&gt;&gt;Controller: Schedule test job\n    Controller-&gt;&gt;Library: Allocate resources\n    Library-&gt;&gt;Router: Route control messages\n    Router-&gt;&gt;Firmware: Send control commands\n    Firmware-&gt;&gt;Hardware: Control hardware pins\n    Hardware-&gt;&gt;DUT: Physical interaction\n    DUT--&gt;&gt;Hardware: Response signals\n    Hardware--&gt;&gt;Firmware: Read status\n    Firmware--&gt;&gt;Router: Report results\n    Router--&gt;&gt;Library: Forward results\n    Library--&gt;&gt;Controller: Update job status\n    Controller--&gt;&gt;CLI: Return test results\n    CLI--&gt;&gt;User: Display results</code></pre>"},{"location":"architecture/#deployment-architecture","title":"Deployment Architecture","text":"<p>The system supports multiple deployment models:</p> <pre><code>graph TB\n    subgraph \"Standalone Deployment\"\n        S_CLI[CLI Tools]\n        S_LIB[Local Library]\n        S_HW[Direct Hardware]\n    end\n\n    subgraph \"Kubernetes Deployment\"\n        K_API[API Gateway]\n        K_CTL[Controller Pods]\n        K_LIB[Library Services]\n        K_HW[Hardware Nodes]\n    end\n\n    subgraph \"Hybrid Deployment\"\n        H_CLI[Local CLI]\n        H_K8S[Remote K8s Cluster]\n        H_HW[Local Hardware]\n    end\n\n    S_CLI --&gt; S_LIB\n    S_LIB --&gt; S_HW\n\n    K_API --&gt; K_CTL\n    K_CTL --&gt; K_LIB\n    K_LIB --&gt; K_HW\n\n    H_CLI --&gt; H_K8S\n    H_CLI --&gt; H_HW\n    H_K8S --&gt; H_HW\n\n    style S_LIB fill:#e1f5fe\n    style K_CTL fill:#f3e5f5\n    style H_K8S fill:#fff3e0</code></pre>"},{"location":"architecture/#package-distribution-flow","title":"Package Distribution Flow","text":"<pre><code>graph LR\n    subgraph \"Source Code\"\n        SRC[Monorepo Source]\n    end\n\n    subgraph \"Build Process\"\n        BUILD[Unified Build System]\n    end\n\n    subgraph \"Package Types\"\n        PY_PKG[Python Wheels&lt;br/&gt;PyPI]\n        DEB_PKG[Debian Packages&lt;br/&gt;APT Repo]\n        RPM_PKG[RPM Packages&lt;br/&gt;YUM Repo]\n        CONT[Container Images&lt;br/&gt;Registry]\n        FW_PKG[Firmware Binaries&lt;br/&gt;Releases]\n    end\n\n    subgraph \"Distribution\"\n        PYPI[PyPI Repository]\n        DEB_REPO[Debian Repository]\n        RPM_REPO[RPM Repository]\n        DOCKER[Container Registry]\n        GITHUB[GitHub Releases]\n    end\n\n    SRC --&gt; BUILD\n    BUILD --&gt; PY_PKG\n    BUILD --&gt; DEB_PKG\n    BUILD --&gt; RPM_PKG\n    BUILD --&gt; CONT\n    BUILD --&gt; FW_PKG\n\n    PY_PKG --&gt; PYPI\n    DEB_PKG --&gt; DEB_REPO\n    RPM_PKG --&gt; RPM_REPO\n    CONT --&gt; DOCKER\n    FW_PKG --&gt; GITHUB\n\n    style BUILD fill:#e8f5e8</code></pre>"},{"location":"architecture/#security-considerations","title":"Security Considerations","text":"<ul> <li>Component isolation</li> <li>Secure communication protocols</li> <li>Access control and authentication</li> <li>Audit logging</li> </ul>"},{"location":"development/","title":"Development Guide","text":"<p>This guide covers the development workflow for the Jumpstarter monorepo.</p>"},{"location":"development/#development-environment","title":"Development Environment","text":"<p>The monorepo uses a unified development environment with multi-language support.</p> <pre><code>graph TB\n    subgraph \"Development Setup\"\n        CLONE[Clone Repository]\n        SETUP[make setup]\n        ENV[Development Environment]\n    end\n\n    subgraph \"Multi-language Tools\"\n        PY_TOOLS[Python Tools&lt;br/&gt;UV, Black, Ruff]\n        GO_TOOLS[Go Tools&lt;br/&gt;gofmt, golangci-lint]\n        RUST_TOOLS[Rust Tools&lt;br/&gt;cargo, clippy, rustfmt]\n        TS_TOOLS[TypeScript Tools&lt;br/&gt;npm, eslint, prettier]\n    end\n\n    subgraph \"Unified Commands\"\n        BUILD[make build]\n        TEST[make test]\n        LINT[make lint]\n        FMT[make fmt]\n    end\n\n    CLONE --&gt; SETUP\n    SETUP --&gt; ENV\n    ENV --&gt; PY_TOOLS\n    ENV --&gt; GO_TOOLS\n    ENV --&gt; RUST_TOOLS\n    ENV --&gt; TS_TOOLS\n\n    PY_TOOLS --&gt; BUILD\n    GO_TOOLS --&gt; BUILD\n    RUST_TOOLS --&gt; BUILD\n    TS_TOOLS --&gt; BUILD\n\n    BUILD --&gt; TEST\n    TEST --&gt; LINT\n    LINT --&gt; FMT\n\n    style ENV fill:#e8f5e8\n    style BUILD fill:#e1f5fe</code></pre>"},{"location":"development/#available-commands","title":"Available Commands","text":"<p>Use <code>make help</code> to see all available commands:</p> <ul> <li><code>make setup</code> - Initial setup of development environment</li> <li><code>make build</code> - Build all components</li> <li><code>make test</code> - Run all tests</li> <li><code>make lint</code> - Run all linters</li> <li><code>make fmt</code> - Format all code</li> <li><code>make clean</code> - Clean all build artifacts</li> </ul>"},{"location":"development/#language-specific-development","title":"Language-specific Development","text":""},{"location":"development/#python","title":"Python","text":"<pre><code>make dev-python    # Start Python development environment\nmake test-python   # Run Python tests\nmake lint-python   # Lint Python code\n</code></pre>"},{"location":"development/#go","title":"Go","text":"<pre><code>make dev-go       # Start Go development environment\nmake test-go      # Run Go tests\nmake lint-go      # Lint Go code\n</code></pre>"},{"location":"development/#rust","title":"Rust","text":"<pre><code>make dev-rust     # Start Rust development environment\nmake test-rust    # Run Rust tests\nmake lint-rust    # Lint Rust code\n</code></pre>"},{"location":"development/#contributing","title":"Contributing","text":""},{"location":"development/#workflow","title":"Workflow","text":"<pre><code>flowchart TD\n    START[Start Development]\n    BRANCH[Create Feature Branch]\n    CODE[Make Changes]\n    LOCAL[Test Locally with Act]\n    BUILD[Run make build]\n    TEST[Run make test]\n    LINT[Run make lint]\n    COMMIT[Commit Changes]\n    PR[Submit Pull Request]\n    REVIEW[Code Review]\n    MERGE[Merge to Main]\n\n    START --&gt; BRANCH\n    BRANCH --&gt; CODE\n    CODE --&gt; LOCAL\n    LOCAL --&gt; BUILD\n    BUILD --&gt; TEST\n    TEST --&gt; LINT\n    LINT --&gt; COMMIT\n    COMMIT --&gt; PR\n    PR --&gt; REVIEW\n    REVIEW --&gt;|Approved| MERGE\n    REVIEW --&gt;|Changes Requested| CODE\n\n    BUILD --&gt;|Failed| CODE\n    TEST --&gt;|Failed| CODE\n    LINT --&gt;|Failed| CODE\n    LOCAL --&gt;|Failed| CODE\n\n    style START fill:#e8f5e8\n    style MERGE fill:#e1f5fe\n    style CODE fill:#fff3e0\n    style LOCAL fill:#ffebee</code></pre> <ol> <li>Create a feature branch</li> <li>Make your changes</li> <li>Test workflows locally: See Local Workflow Testing for act integration</li> <li>Run tests: <code>make test</code></li> <li>Run linting: <code>make lint</code></li> <li>Submit a pull request</li> </ol>"},{"location":"development/#code-standards","title":"Code Standards","text":"<ul> <li>Follow language-specific conventions</li> <li>Ensure all tests pass</li> <li>Maintain documentation</li> <li>Use pre-commit hooks: <code>make pre-commit-install</code></li> </ul>"},{"location":"development/#project-structure","title":"Project Structure","text":"<p>Each component follows its own conventions while integrating with the monorepo build system.</p> <pre><code>graph TB\n    subgraph \"Monorepo Structure\"\n        ROOT[jumpstarter-mono/]\n\n        subgraph \"Core Components\"\n            CORE_JS[core/jumpstarter/]\n            CORE_CTL[core/controller/]\n            CORE_PROTO[core/protocol/]\n        end\n\n        subgraph \"Hardware Components\"\n            HW_FW[hardware/dutlink-firmware/]\n            HW_BOARD[hardware/dutlink-board/]\n        end\n\n        subgraph \"Support Components\"\n            PKG[packages/]\n            INT[integrations/]\n            TMPL[templates/]\n            TEST[testing/]\n            LAB[lab-config/]\n        end\n    end\n\n    ROOT --&gt; CORE_JS\n    ROOT --&gt; CORE_CTL\n    ROOT --&gt; CORE_PROTO\n    ROOT --&gt; HW_FW\n    ROOT --&gt; HW_BOARD\n    ROOT --&gt; PKG\n    ROOT --&gt; INT\n    ROOT --&gt; TMPL\n    ROOT --&gt; TEST\n    ROOT --&gt; LAB\n\n    style ROOT fill:#e8f5e8\n    style CORE_JS fill:#e1f5fe\n    style CORE_CTL fill:#f3e5f5\n    style HW_FW fill:#fff3e0</code></pre>"},{"location":"development/#core-components","title":"Core Components","text":"<ul> <li><code>core/jumpstarter/</code> - Main Python library</li> <li><code>core/controller/</code> - Kubernetes controller (Go)</li> <li><code>core/protocol/</code> - Protocol definitions</li> </ul>"},{"location":"development/#hardware-components","title":"Hardware Components","text":"<ul> <li><code>hardware/dutlink-firmware/</code> - Rust firmware</li> <li><code>hardware/dutlink-board/</code> - Hardware design files</li> </ul>"},{"location":"development/#testing","title":"Testing","text":"<p>The monorepo includes comprehensive testing:</p> <pre><code>graph TB\n    subgraph \"Testing Pyramid\"\n        E2E[End-to-End Tests&lt;br/&gt;Full system validation]\n        INT[Integration Tests&lt;br/&gt;Component interactions]\n        UNIT[Unit Tests&lt;br/&gt;Individual functions]\n    end\n\n    subgraph \"Test Execution\"\n        ALL[make test&lt;br/&gt;All Tests]\n        LANG_PY[make test-python]\n        LANG_GO[make test-go]\n        LANG_RUST[make test-rust]\n        E2E_ONLY[make test-e2e]\n    end\n\n    subgraph \"Workflow Testing\"\n        ACT[act - Local Workflow Testing]\n        CI_LOCAL[Test CI/CD Locally]\n        VALIDATE[Validation Scripts]\n    end\n\n    subgraph \"Test Types\"\n        PERF[Performance Tests]\n        SEC[Security Tests]\n        COMPAT[Compatibility Tests]\n    end\n\n    UNIT --&gt; INT\n    INT --&gt; E2E\n\n    ALL --&gt; LANG_PY\n    ALL --&gt; LANG_GO\n    ALL --&gt; LANG_RUST\n    ALL --&gt; E2E_ONLY\n\n    E2E --&gt; PERF\n    E2E --&gt; SEC\n    E2E --&gt; COMPAT\n\n    ACT --&gt; CI_LOCAL\n    CI_LOCAL --&gt; VALIDATE\n\n    style E2E fill:#ffebee\n    style INT fill:#fff3e0\n    style UNIT fill:#e8f5e8\n    style ACT fill:#e1f5fe</code></pre>"},{"location":"development/#local-workflow-testing","title":"Local Workflow Testing","text":"<p>Test GitHub Actions workflows locally using act:</p> <pre><code># Test the full CI pipeline locally\nact workflow_dispatch -W .github/workflows/ci.yml --env ACT=true\n\n# Validate all workflows\n./scripts/validate-ci-with-act.sh\n</code></pre> <p>For detailed instructions, see Local Workflow Testing.</p>"},{"location":"development/#code-testing","title":"Code Testing","text":"<ul> <li>Unit tests for each component</li> <li>Integration tests</li> <li>End-to-end tests</li> <li>Performance tests</li> </ul> <p>Run all tests with:</p> <pre><code>make test\n</code></pre>"},{"location":"development/act-integration/","title":"Local Workflow Testing with Act","text":"<p>This repository includes comprehensive integration with act for local testing of GitHub Actions workflows. Act allows you to run workflows locally in Docker containers, enabling faster iteration and debugging of CI/CD changes.</p>"},{"location":"development/act-integration/#quick-start","title":"Quick Start","text":"<pre><code># Install act (see installation options below)\ncurl https://raw.githubusercontent.com/nektos/act/master/install.sh | sudo bash\n\n# Test the main CI workflow\nact workflow_dispatch -W .github/workflows/ci.yml --env ACT=true\n\n# Run comprehensive validation on all workflows\n./scripts/validate-ci-with-act.sh\n\n# Test specific masking conditions\n./scripts/test-act-masking.sh\n</code></pre> <p>\ud83d\udca1 Tip: Use the validation scripts first to ensure your environment is properly configured before running individual workflows.</p>"},{"location":"development/act-integration/#installation","title":"Installation","text":""},{"location":"development/act-integration/#option-1-official-installer-recommended","title":"Option 1: Official Installer (Recommended)","text":"<p>Install act using the official installer:</p> <pre><code>curl https://raw.githubusercontent.com/nektos/act/master/install.sh | sudo bash\n</code></pre>"},{"location":"development/act-integration/#option-2-package-managers","title":"Option 2: Package Managers","text":"<p>macOS with Homebrew:</p> <pre><code>brew install act\n</code></pre> <p>Arch Linux:</p> <pre><code>sudo pacman -S act\n</code></pre> <p>Manual Download: If you experience network issues with the installer, download directly from GitHub releases:</p> <pre><code># Download the latest release for your platform\nLATEST_VERSION=$(curl -s https://api.github.com/repos/nektos/act/releases/latest | grep -oP '\"tag_name\": \"\\K(.*)(?=\")')\nwget \"https://github.com/nektos/act/releases/download/${LATEST_VERSION}/act_Linux_x86_64.tar.gz\"\ntar xzf act_Linux_x86_64.tar.gz\nsudo mv act /usr/local/bin/\n</code></pre>"},{"location":"development/act-integration/#option-3-using-go","title":"Option 3: Using Go","text":"<p>If you have Go installed:</p> <pre><code>go install github.com/nektos/act@latest\n</code></pre>"},{"location":"development/act-integration/#option-4-docker-no-installation-required","title":"Option 4: Docker (No Installation Required)","text":"<p>Run act directly with Docker:</p> <pre><code># Create an alias for easier use\nalias act='docker run --rm -it -v /var/run/docker.sock:/var/run/docker.sock -v \"$PWD\":/workspace -w /workspace nektos/act'\n\n# Use normally\nact workflow_dispatch -W .github/workflows/ci.yml --env ACT=true\n</code></pre>"},{"location":"development/act-integration/#configuration","title":"Configuration","text":"<p>The workflows are designed to work with act out of the box. When running under act, the <code>ACT</code> environment variable is automatically set to <code>true</code>, which conditionally disables steps that:</p> <ul> <li>Push artifacts to external services</li> <li>Make changes to the repository (tags, releases)</li> <li>Require authentication tokens</li> <li>Perform Docker registry operations</li> </ul>"},{"location":"development/act-integration/#repository-actrc-configuration","title":"Repository .actrc Configuration","text":"<p>The repository includes a <code>.actrc</code> configuration file with optimal defaults:</p> <pre><code># Use medium-sized Ubuntu container for better compatibility\n-P ubuntu-latest=catthehacker/ubuntu:act-latest\n\n# Set ACT environment variable automatically\n--env ACT=true\n\n# Enable artifact server for local artifact handling\n--artifact-server-path /tmp/artifacts\n\n# Default event for testing\n--eventpath .github/workflows/events/workflow_dispatch.json\n</code></pre> <p>This configuration ensures consistent behavior across all local testing scenarios and eliminates the need to specify <code>--env ACT=true</code> manually.</p>"},{"location":"development/act-integration/#usage-examples","title":"Usage Examples","text":""},{"location":"development/act-integration/#basic-workflow-testing","title":"Basic Workflow Testing","text":"<p>Test the CI workflow structure:</p> <pre><code>act workflow_dispatch -W .github/workflows/ci.yml --list\n</code></pre> <p>Run the CI workflow (using .actrc configuration):</p> <pre><code>act workflow_dispatch -W .github/workflows/ci.yml\n</code></pre>"},{"location":"development/act-integration/#event-specific-testing","title":"Event-Specific Testing","text":"<p>Test pull request events:</p> <pre><code>act pull_request\n</code></pre> <p>Test push events:</p> <pre><code>act push\n</code></pre>"},{"location":"development/act-integration/#job-specific-testing","title":"Job-Specific Testing","text":"<p>Run only the change detection job:</p> <pre><code>act workflow_dispatch -j detect-changes\n</code></pre> <p>Run specific language builds:</p> <pre><code>act workflow_dispatch -j python-test\nact workflow_dispatch -j controller-build\n</code></pre>"},{"location":"development/act-integration/#reusable-workflow-testing","title":"Reusable Workflow Testing","text":"<p>Test reusable workflows:</p> <pre><code>act workflow_call -W .github/workflows/reusable-rust-build.yml \\\n  --input working-directory=hardware/dutlink-firmware \\\n  --input targets=thumbv7em-none-eabihf\n</code></pre>"},{"location":"development/act-integration/#automated-validation","title":"Automated Validation","text":"<p>The repository includes comprehensive validation tools for testing workflows with act:</p>"},{"location":"development/act-integration/#validation-script","title":"Validation Script","text":"<p>Use the main validation script to test all workflows:</p> <pre><code>./scripts/validate-ci-with-act.sh\n</code></pre> <p>This script performs:</p> <ul> <li>YAML syntax validation for all workflow files</li> <li>Workflow structure validation using act's <code>--list</code> mode</li> <li>ACT masking condition verification to ensure proper conditional execution</li> <li>Basic workflow execution testing with dry-run mode</li> <li>Summary reporting of validation results</li> </ul>"},{"location":"development/act-integration/#act-masking-test","title":"ACT Masking Test","text":"<p>Test specific masking conditions:</p> <pre><code>./scripts/test-act-masking.sh\n</code></pre> <p>This script validates:</p> <ul> <li>All steps that should be masked under act have proper <code>if: ${{ !env.ACT }}</code> conditions</li> <li>Steps that push artifacts, publish packages, or modify repositories are properly masked</li> <li>Local-only debug steps work correctly under act</li> </ul>"},{"location":"development/act-integration/#manual-validation","title":"Manual Validation","text":"<p>You can also run individual validations:</p> <pre><code># Validate workflow structure\nact workflow_dispatch -W .github/workflows/ci.yml --list\n\n# Test workflow with act environment\nact workflow_dispatch -W .github/workflows/ci.yml --env ACT=true --dry-run\n\n# Validate specific jobs\nact workflow_dispatch -j detect-changes --list\n</code></pre>"},{"location":"development/act-integration/#container-images","title":"Container Images","text":"<p>Act supports different runner images:</p> <ul> <li>Micro (~200MB): Basic NodeJS environment, fastest but limited</li> <li>Medium (~500MB): Includes common tools, good balance</li> <li>Large (~17GB): Full GitHub runner environment, most compatible</li> </ul> <p>Choose based on your workflow requirements:</p> <pre><code># Use medium image (recommended)\nact --platform ubuntu-latest=catthehacker/ubuntu:act-latest\n\n# Use micro image for simple workflows\nact --platform ubuntu-latest=node:16-alpine\n\n# Use large image for complex workflows\nact --platform ubuntu-latest=catthehacker/ubuntu:full-latest\n</code></pre>"},{"location":"development/act-integration/#conditional-masking","title":"Conditional Masking","text":"<p>Steps that should not run under act are masked with:</p> <pre><code>- name: Step that pushes artifacts\n  if: ${{ !env.ACT }}\n  uses: actions/upload-artifact@v4\n  # ... rest of step\n</code></pre> <p>Steps that only run under act:</p> <pre><code>- name: Debug step for local testing\n  if: ${{ env.ACT }}\n  run: echo \"Running under act for local testing\"\n</code></pre>"},{"location":"development/act-integration/#limitations","title":"Limitations","text":"<p>When running with act:</p> <ol> <li>No external authentication: Steps requiring GitHub tokens, PyPI tokens, etc. are masked</li> <li>No artifact persistence: Artifacts are not uploaded to GitHub</li> <li>Limited container images: Some tools may not be available in minimal images</li> <li>No real external services: External API calls may fail</li> <li>File system differences: Container filesystem differs from GitHub runners</li> </ol>"},{"location":"development/act-integration/#troubleshooting","title":"Troubleshooting","text":""},{"location":"development/act-integration/#common-issues-and-solutions","title":"Common Issues and Solutions","text":""},{"location":"development/act-integration/#1-paths-filter-action-errors","title":"1. Paths-filter Action Errors","text":"<p>Error: \"This action requires 'base' input to be configured\"</p> <p>Solution: The CI workflow now includes automatic base branch configuration for act:</p> <pre><code>- name: Check for changes\n  uses: dorny/paths-filter@v3\n  with:\n    base: ${{ env.ACT &amp;&amp; 'main' || '' }}\n    filters: |\n      # ... filters\n</code></pre> <p>This ensures the paths-filter action works correctly in both GitHub Actions and act environments.</p>"},{"location":"development/act-integration/#2-certificatenetwork-issues","title":"2. Certificate/Network Issues","text":"<p>Error: \"self-signed certificate in certificate chain\"</p> <p>This is common when using actions that download tools. Solutions:</p> <pre><code># Option 1: Use pre-built containers with tools included\nact -P ubuntu-latest=ghcr.io/catthehacker/ubuntu:full-latest\n\n# Option 2: Skip problematic jobs during testing\nact workflow_dispatch -j detect-changes  # Test only specific jobs\n\n# Option 3: Use dryrun mode for structure validation\nact workflow_dispatch --dryrun\n</code></pre>"},{"location":"development/act-integration/#3-container-image-issues","title":"3. Container Image Issues","text":"<p>Error: Command not found or missing tools</p> <pre><code># Use full-featured container for complete tool compatibility\nact --platform ubuntu-latest=ghcr.io/catthehacker/ubuntu:full-latest\n\n# Or specify different container images per job\nact -P ubuntu-latest=ubuntu:22.04  # Official Ubuntu with apt packages\n</code></pre>"},{"location":"development/act-integration/#network-and-firewall-issues","title":"Network and Firewall Issues","text":"<p>DNS Resolution Problems: If you encounter DNS blocks for <code>api.nektosact.com</code> or other act-related domains:</p> <pre><code># Option 1: Use Docker-based act (bypasses local network issues)\nalias act='docker run --rm -it -v /var/run/docker.sock:/var/run/docker.sock -v \"$PWD\":/workspace -w /workspace nektos/act'\n\n# Option 2: Download manually and install\n# See installation options above for manual download instructions\n\n# Option 3: Use alternative container registries\nact --platform ubuntu-latest=ubuntu:20.04  # Use official Ubuntu instead\n</code></pre> <p>Corporate Firewall/Proxy Issues:</p> <pre><code># Configure Docker to use proxy\nexport HTTPS_PROXY=your-proxy:port\nexport HTTP_PROXY=your-proxy:port\n\n# Or configure act to use different registries\nact --platform ubuntu-latest=registry-1.docker.io/library/ubuntu:20.04\n</code></pre>"},{"location":"development/act-integration/#common-issues","title":"Common Issues","text":"<p>Git not found:</p> <pre><code># Use a larger image with git installed\nact --platform ubuntu-latest=catthehacker/ubuntu:act-latest\n\n# Or specify in ~/.actrc\necho \"--platform ubuntu-latest=catthehacker/ubuntu:act-latest\" &gt;&gt; ~/.actrc\n</code></pre> <p>Bash not found:</p> <pre><code># Use an image with bash\nact --platform ubuntu-latest=ubuntu:20.04\n\n# For minimal setups, install bash in container\nact --platform ubuntu-latest=node:16-alpine --env SETUP_BASH=true\n</code></pre> <p>Action compatibility issues:</p> <pre><code># Use the full image for maximum compatibility\nact --platform ubuntu-latest=catthehacker/ubuntu:full-latest\n\n# Check specific action requirements\nact workflow_dispatch --list  # Shows action compatibility\n</code></pre> <p>Docker daemon not running:</p> <pre><code># Start Docker service\nsudo systemctl start docker\n\n# Or for Docker Desktop\nopen -a Docker  # macOS\n# Windows: Start Docker Desktop from Start Menu\n</code></pre> <p>Permission denied errors:</p> <pre><code># Add user to docker group (Linux)\nsudo usermod -aG docker $USER\nnewgrp docker\n\n# Or run with sudo (not recommended for security)\nsudo act workflow_dispatch --env ACT=true\n</code></pre> <p>Container image pull failures:</p> <pre><code># Use smaller images that are more likely to be cached\nact --platform ubuntu-latest=node:16-alpine\n\n# Pre-pull images manually\ndocker pull catthehacker/ubuntu:act-latest\ndocker pull ghcr.io/catthehacker/ubuntu:act-latest\n\n# Use local registry if available\nact --platform ubuntu-latest=localhost:5000/ubuntu:act-latest\n</code></pre>"},{"location":"development/act-integration/#debug-mode","title":"Debug Mode","text":"<p>Run with verbose output for detailed troubleshooting:</p> <pre><code># Maximum verbosity\nact workflow_dispatch --verbose --env ACT=true\n\n# With Docker debug info\nact workflow_dispatch --env ACT=true --container-daemon-socket /var/run/docker.sock -v\n\n# Test specific job with debug\nact workflow_dispatch -j python-test --env ACT=true --verbose\n</code></pre>"},{"location":"development/act-integration/#environment-specific-issues","title":"Environment-Specific Issues","text":"<p>Resource Constraints:</p> <pre><code># Use micro image for resource-constrained environments\nact --platform ubuntu-latest=node:16-alpine\n\n# Limit container resources\nact --container-options \"--memory=1g --cpus=1\"\n\n# Clean up containers after runs\nact --rm\n</code></pre> <p>File System Permissions:</p> <pre><code># Fix workspace permissions\nact --userns host\n\n# Mount with proper ownership\nact --env RUNNER_UID=$(id -u) --env RUNNER_GID=$(id -g)\n</code></pre> <p>Multiple Docker Contexts:</p> <pre><code># List available contexts\ndocker context ls\n\n# Use specific context\nact --container-daemon-socket /var/run/docker.sock\n\n# Or set specific context\ndocker context use desktop-linux  # or your preferred context\n</code></pre>"},{"location":"development/act-integration/#local-configuration","title":"Local Configuration","text":"<p>Create <code>~/.actrc</code> for persistent configuration:</p> <pre><code>--platform ubuntu-latest=catthehacker/ubuntu:act-latest\n--env ACT=true\n--artifact-server-path /tmp/artifacts\n</code></pre>"},{"location":"development/act-integration/#examples","title":"Examples","text":""},{"location":"development/act-integration/#test-python-components","title":"Test Python Components","text":"<pre><code>act workflow_dispatch -j python-lint --env ACT=true\nact workflow_dispatch -j python-test --env ACT=true\n</code></pre>"},{"location":"development/act-integration/#test-go-components","title":"Test Go Components","text":"<pre><code>act workflow_dispatch -j controller-build --env ACT=true\nact workflow_dispatch -j lab-config-build --env ACT=true\n</code></pre>"},{"location":"development/act-integration/#test-rust-components","title":"Test Rust Components","text":"<pre><code>act workflow_dispatch -j rust-build --env ACT=true\n</code></pre>"},{"location":"development/act-integration/#test-documentation","title":"Test Documentation","text":"<pre><code>act workflow_dispatch -j docs-build --env ACT=true\n</code></pre>"},{"location":"development/act-integration/#integration-with-development-workflow","title":"Integration with Development Workflow","text":"<ol> <li>Before committing: Run act to validate workflow changes</li> <li>When debugging CI failures: Reproduce issues locally with act</li> <li>When adding new workflows: Test locally before pushing</li> <li>When modifying reusable workflows: Validate with different inputs</li> </ol>"},{"location":"development/act-integration/#performance-considerations","title":"Performance Considerations","text":""},{"location":"development/act-integration/#image-selection-strategy","title":"Image Selection Strategy","text":"<p>Choose container images based on your testing needs:</p> <pre><code># For quick syntax/structure validation (fastest)\nact --platform ubuntu-latest=node:16-alpine --list\n\n# For most development workflows (recommended balance)\nact --platform ubuntu-latest=catthehacker/ubuntu:act-latest\n\n# For complex workflows with many dependencies (slowest but most compatible)\nact --platform ubuntu-latest=catthehacker/ubuntu:full-latest\n</code></pre>"},{"location":"development/act-integration/#optimization-tips","title":"Optimization Tips","text":"<p>Cache Docker Images:</p> <pre><code># Pre-pull commonly used images\ndocker pull catthehacker/ubuntu:act-latest\ndocker pull ghcr.io/catthehacker/ubuntu:act-latest\ndocker pull node:16-alpine\n\n# Use local images without version tags to avoid pulls\nact --platform ubuntu-latest=catthehacker/ubuntu:act-latest\n</code></pre> <p>Selective Job Execution:</p> <pre><code># Test only changed components\nact workflow_dispatch -j detect-changes --env ACT=true\nact workflow_dispatch -j python-test --env ACT=true\n\n# Skip jobs that aren't relevant to your changes\nact workflow_dispatch --job controller-build --env ACT=true\n</code></pre> <p>Resource Management:</p> <pre><code># Limit container resources for faster startup\nact --container-options \"--memory=1g --cpus=2\"\n\n# Clean up containers automatically\nact --rm\n\n# Use bind mounts instead of volumes for faster I/O\nact --bind\n</code></pre> <p>Parallel Execution: Act supports running multiple jobs in parallel by default, but you can control this:</p> <pre><code># Limit parallelism for resource-constrained systems\nact --job python-test --job controller-build  # Runs in parallel by default\n\n# Run jobs sequentially if needed\nact --job python-test --env ACT=true &amp;&amp; act --job controller-build --env ACT=true\n</code></pre> <ul> <li>Use appropriate image sizes: Micro for simple jobs, Medium for most cases</li> <li>Cache Docker images: Reuse images across runs to avoid repeated downloads</li> <li>Parallel execution: Act supports running multiple jobs in parallel when dependencies allow</li> <li>Selective job execution: Use <code>-j</code> flag to run only specific jobs you're working on</li> <li>Local artifact storage: Configure <code>--artifact-server-path</code> for faster artifact handling</li> </ul> <p>This integration ensures that workflows can be thoroughly tested locally, reducing CI/CD feedback cycles and improving development velocity.</p>"},{"location":"development/act-integration/#quick-reference","title":"Quick Reference","text":""},{"location":"development/act-integration/#essential-commands","title":"Essential Commands","text":"Command Purpose <code>act workflow_dispatch -W .github/workflows/ci.yml --env ACT=true</code> Test CI workflow <code>act pull_request --env ACT=true</code> Test pull request workflow <code>act push --env ACT=true</code> Test push workflow <code>act workflow_dispatch -j python-test --env ACT=true</code> Test specific job <code>./scripts/validate-ci-with-act.sh</code> Validate all workflows <code>act --list</code> List available workflows and jobs"},{"location":"development/act-integration/#common-flags","title":"Common Flags","text":"Flag Description <code>--env ACT=true</code> Set ACT environment variable (masks publish steps) <code>--list</code> List workflows/jobs without execution <code>--dry-run</code> Show what would run without execution <code>--verbose</code> Verbose output for debugging <code>-j JOB_NAME</code> Run specific job only <code>-W WORKFLOW_FILE</code> Specify workflow file <code>--platform ubuntu-latest=IMAGE</code> Use specific container image"},{"location":"development/act-integration/#container-images_1","title":"Container Images","text":"Image Size Use Case <code>node:16-alpine</code> ~200MB Simple Node.js workflows <code>catthehacker/ubuntu:act-latest</code> ~500MB General purpose (recommended) <code>catthehacker/ubuntu:full-latest</code> ~17GB Maximum compatibility <code>ubuntu:20.04</code> ~200MB Basic Ubuntu environment"},{"location":"development/act-integration/#masked-operations","title":"Masked Operations","text":"<p>The following operations are automatically skipped when <code>ACT=true</code>:</p> <ul> <li>\u2705 Artifact uploads/downloads (<code>actions/upload-artifact</code>, <code>actions/download-artifact</code>)</li> <li>\u2705 Package publishing (PyPI, npm, container registries)</li> <li>\u2705 Repository modifications (creating tags, releases)</li> <li>\u2705 External service deployments</li> <li>\u2705 Marketplace publishing (VSCode extensions)</li> <li>\u2705 Docker registry authentication and pushes</li> </ul>"},{"location":"development/act-integration/#configuration-files","title":"Configuration Files","text":"<p>Create <code>~/.actrc</code> for persistent configuration:</p> <pre><code>--platform ubuntu-latest=catthehacker/ubuntu:act-latest\n--env ACT=true\n--artifact-server-path /tmp/artifacts\n--rm\n</code></pre> <p>Create <code>.actrc</code> in repository root for project-specific settings:</p> <pre><code>--platform ubuntu-latest=catthehacker/ubuntu:act-latest\n--env ACT=true\n</code></pre>"},{"location":"hardware/","title":"Hardware Documentation","text":"<p>This section covers the hardware components of the Jumpstarter system.</p>"},{"location":"hardware/#hardware-architecture-overview","title":"Hardware Architecture Overview","text":"<pre><code>graph TB\n    subgraph \"Host System\"\n        HOST[Host Computer&lt;br/&gt;Running Jumpstarter]\n        USB[USB 3.0 Interface]\n        ETH[Ethernet Interface]\n    end\n\n    subgraph \"DUT Link Board\"\n        MCU[STM32 MCU&lt;br/&gt;Rust Firmware]\n        POWER[Power Management&lt;br/&gt;3.3V, 5V, 12V]\n        GPIO[16x GPIO Pins]\n        UART[4x UART Ports]\n        SPI[2x SPI Ports]\n        I2C[2x I2C Ports]\n        USB_PORTS[4x USB Ports]\n        MONITOR[Current/Voltage&lt;br/&gt;Monitoring]\n    end\n\n    subgraph \"DUT Pi-Link Board\"\n        PI[Raspberry Pi&lt;br/&gt;Linux System]\n        RELAY[8-Channel Relay&lt;br/&gt;Waveshare Board]\n        SDMUX[USB-SD-Mux FAST&lt;br/&gt;SD Card Flashing]\n        SERIAL[USB-Serial&lt;br/&gt;Console Converter]\n        ETH_USB[Ethernet-USB&lt;br/&gt;Dongle]\n        PI_ETH[Pi Ethernet&lt;br/&gt;External Network]\n        PI_GPIO[Pi GPIO&lt;br/&gt;Custom Control]\n    end\n\n    subgraph \"Device Under Test\"\n        DUT[Target Device]\n        POWER_IN[Power Input]\n        DATA_IO[Data I/O]\n        CONSOLE[Debug Console]\n        SD_SLOT[SD Card Slot]\n        DIP_SW[DIP Switches]\n    end\n\n    HOST --&gt; USB\n    HOST --&gt; ETH\n    USB --&gt; MCU\n    ETH --&gt; MCU\n\n    MCU --&gt; POWER\n    MCU --&gt; GPIO\n    MCU --&gt; UART\n    MCU --&gt; SPI\n    MCU --&gt; I2C\n    MCU --&gt; USB_PORTS\n    MCU --&gt; MONITOR\n\n    HOST --&gt; PI\n    PI --&gt; RELAY\n    PI --&gt; SDMUX\n    PI --&gt; SERIAL\n    PI --&gt; ETH_USB\n    PI --&gt; PI_ETH\n    PI --&gt; PI_GPIO\n\n    POWER --&gt; POWER_IN\n    GPIO --&gt; DATA_IO\n    UART --&gt; CONSOLE\n    USB_PORTS --&gt; DUT\n\n    RELAY --&gt; POWER_IN\n    RELAY --&gt; DIP_SW\n    SDMUX --&gt; SD_SLOT\n    SERIAL --&gt; CONSOLE\n    ETH_USB --&gt; DUT\n\n    MONITOR --&gt; MCU\n\n    style HOST fill:#e1f5fe\n    style MCU fill:#fff3e0\n    style PI fill:#e8f5e8\n    style DUT fill:#ffebee\n    style POWER fill:#e8f5e8\n    style RELAY fill:#ffcdd2</code></pre>"},{"location":"hardware/#dut-link-board","title":"DUT Link Board","text":""},{"location":"hardware/#original-dut-link-board","title":"Original DUT Link Board","text":"<p>The original DUT Link Board is a custom hardware solution for interfacing with devices under test.</p>"},{"location":"hardware/#features","title":"Features","text":"<ul> <li>Multiple I/O interfaces</li> <li>Power control and monitoring</li> <li>Real-time data acquisition</li> <li>USB and Ethernet connectivity</li> </ul>"},{"location":"hardware/#specifications","title":"Specifications","text":""},{"location":"hardware/#power","title":"Power","text":"<ul> <li>Input: 12V DC</li> <li>Output: Configurable 3.3V, 5V, 12V</li> <li>Current monitoring: Up to 10A</li> <li>Protection: Over-current, over-voltage</li> </ul>"},{"location":"hardware/#io-interfaces","title":"I/O Interfaces","text":"<ul> <li>GPIO: 16 configurable pins</li> <li>UART: 4 ports</li> <li>SPI: 2 ports</li> <li>I2C: 2 ports</li> <li>USB: 4 ports (host/device configurable)</li> </ul>"},{"location":"hardware/#connectivity","title":"Connectivity","text":"<ul> <li>Ethernet: 1Gbps</li> <li>USB 3.0: Host connection</li> <li>Expansion headers for custom interfaces</li> </ul>"},{"location":"hardware/#board-layout","title":"Board Layout","text":"<pre><code>graph TB\n    subgraph \"DUT Link Board Physical Layout\"\n        subgraph \"Top Section\"\n            PWR_IN[12V Power Input&lt;br/&gt;Barrel Jack]\n            USB_HOST[USB 3.0 Host&lt;br/&gt;Connection]\n        end\n\n        subgraph \"Center Section\"\n            MCU_AREA[STM32 MCU&lt;br/&gt;Main Controller]\n            GPIO_HDR[GPIO Headers&lt;br/&gt;16 Pins]\n        end\n\n        subgraph \"Left Section\"\n            UART_CON[UART Connectors&lt;br/&gt;4 Ports]\n            SPI_CON[SPI Connectors&lt;br/&gt;2 Ports]\n            I2C_CON[I2C Connectors&lt;br/&gt;2 Ports]\n        end\n\n        subgraph \"Right Section\"\n            USB_PORTS[USB Ports&lt;br/&gt;4x Type-A]\n            STATUS_LED[Status LEDs&lt;br/&gt;Power, Activity, Error]\n        end\n\n        subgraph \"Bottom Section\"\n            ETH_PORT[Ethernet Port&lt;br/&gt;1Gbps RJ45]\n            EXPANSION[Expansion Headers&lt;br/&gt;Custom Interfaces]\n        end\n\n        PWR_IN --&gt; MCU_AREA\n        USB_HOST --&gt; MCU_AREA\n        MCU_AREA --&gt; GPIO_HDR\n        MCU_AREA --&gt; UART_CON\n        MCU_AREA --&gt; SPI_CON\n        MCU_AREA --&gt; I2C_CON\n        MCU_AREA --&gt; USB_PORTS\n        MCU_AREA --&gt; STATUS_LED\n        MCU_AREA --&gt; ETH_PORT\n        MCU_AREA --&gt; EXPANSION\n    end\n\n    style MCU_AREA fill:#fff3e0\n    style PWR_IN fill:#e8f5e8\n    style USB_HOST fill:#e1f5fe\n    style STATUS_LED fill:#ffebee</code></pre>"},{"location":"hardware/#dut-pi-link-board","title":"DUT Pi-Link Board","text":"<p>The DUT Pi-Link Board is a Raspberry Pi-based hardware solution that provides additional capabilities for device testing and automation, particularly focused on power management, DIP switch control, and SD card flashing.</p>"},{"location":"hardware/#architecture-overview","title":"Architecture Overview","text":"<pre><code>graph TB\n    subgraph \"DUT Pi-Link Board\"\n        subgraph \"Raspberry Pi\"\n            PI_CPU[Raspberry Pi&lt;br/&gt;Linux System]\n            PI_USB[USB Ports]\n            PI_ETH[Ethernet Port&lt;br/&gt;External Network]\n            PI_GPIO[40-Pin GPIO&lt;br/&gt;Header]\n        end\n\n        subgraph \"Waveshare 8-Channel Relay\"\n            RELAY_1[Relay 1&lt;br/&gt;Power Switch]\n            RELAY_2[Relay 2&lt;br/&gt;DIP Switch 1]\n            RELAY_3[Relay 3&lt;br/&gt;DIP Switch 2]\n            RELAY_4[Relay 4&lt;br/&gt;DIP Switch 3]\n            RELAY_5[Relay 5&lt;br/&gt;DIP Switch 4]\n            RELAY_6[Relay 6&lt;br/&gt;DIP Switch 5]\n            RELAY_7[Relay 7&lt;br/&gt;DIP Switch 6]\n            RELAY_8[Relay 8&lt;br/&gt;DIP Switch 7]\n        end\n\n        subgraph \"Interface Components\"\n            SDMUX[USB-SD-Mux FAST&lt;br/&gt;SD Card Flashing]\n            SERIAL[USB-Serial&lt;br/&gt;Console Converter]\n            ETH_USB[Ethernet-USB&lt;br/&gt;Dongle]\n        end\n    end\n\n    subgraph \"Target Device\"\n        DUT_DEVICE[Device Under Test]\n        DUT_POWER[Power Input]\n        DUT_SD[SD Card Slot]\n        DUT_CONSOLE[Serial Console]\n        DUT_NET[Network Interface]\n        DUT_DIP[DIP Switches&lt;br/&gt;Boot Configuration]\n    end\n\n    PI_CPU --&gt; PI_GPIO\n    PI_GPIO --&gt; RELAY_1\n    PI_GPIO --&gt; RELAY_2\n    PI_GPIO --&gt; RELAY_3\n    PI_GPIO --&gt; RELAY_4\n    PI_GPIO --&gt; RELAY_5\n    PI_GPIO --&gt; RELAY_6\n    PI_GPIO --&gt; RELAY_7\n    PI_GPIO --&gt; RELAY_8\n\n    PI_USB --&gt; SDMUX\n    PI_USB --&gt; SERIAL\n    PI_USB --&gt; ETH_USB\n\n    RELAY_1 --&gt; DUT_POWER\n    RELAY_2 --&gt; DUT_DIP\n    RELAY_3 --&gt; DUT_DIP\n    RELAY_4 --&gt; DUT_DIP\n    RELAY_5 --&gt; DUT_DIP\n    RELAY_6 --&gt; DUT_DIP\n    RELAY_7 --&gt; DUT_DIP\n    RELAY_8 --&gt; DUT_DIP\n\n    SDMUX --&gt; DUT_SD\n    SERIAL --&gt; DUT_CONSOLE\n    ETH_USB --&gt; DUT_NET\n\n    style PI_CPU fill:#e8f5e8\n    style RELAY_1 fill:#ffcdd2\n    style SDMUX fill:#e1f5fe\n    style DUT_DEVICE fill:#ffebee</code></pre>"},{"location":"hardware/#key-features","title":"Key Features","text":""},{"location":"hardware/#power-management","title":"Power Management","text":"<ul> <li>Relay Channel 1: Primary power switch capability</li> <li>Clean power cycling: Software-controlled power on/off sequences</li> <li>Power sequencing: Configurable delays for proper device initialization</li> </ul>"},{"location":"hardware/#dip-switch-override","title":"DIP Switch Override","text":"<ul> <li>Relay Channels 2-8: Override individual DIP switches</li> <li>Boot configuration control: Change device boot modes remotely</li> <li>Hardware configuration: Modify device settings without physical access</li> <li>Test mode selection: Switch between different operational modes</li> </ul>"},{"location":"hardware/#sd-card-management","title":"SD Card Management","text":"<ul> <li>USB-SD-Mux FAST: High-speed SD card flashing and switching</li> <li>Remote imaging: Flash new firmware/OS images without physical access</li> <li>Boot media control: Switch between different boot images</li> <li>Fast switching: Quick transition between host and target SD access</li> </ul>"},{"location":"hardware/#console-access","title":"Console Access","text":"<ul> <li>USB-Serial Converter: Direct access to device debug console</li> <li>Remote monitoring: Capture boot logs and runtime messages</li> <li>Interactive debugging: Send commands to device console</li> <li>Log collection: Automated capture of device output</li> </ul>"},{"location":"hardware/#network-configuration","title":"Network Configuration","text":"<ul> <li>Dual Ethernet Setup:</li> <li>External Network: Pi's built-in Ethernet for management</li> <li>DUT Internal Network: USB-Ethernet dongle for device communication</li> <li>Network isolation: Separate management and test networks</li> <li>DHCP/Static IP: Flexible IP configuration for both networks</li> </ul>"},{"location":"hardware/#hardware-specifications","title":"Hardware Specifications","text":""},{"location":"hardware/#raspberry-pi-base","title":"Raspberry Pi Base","text":"<ul> <li>Model: Raspberry Pi 4B (4GB+ recommended)</li> <li>Storage: 32GB+ microSD card for Pi OS</li> <li>Power: 5V/3A USB-C power supply</li> <li>Connectivity: Built-in WiFi, Bluetooth, Ethernet</li> </ul>"},{"location":"hardware/#waveshare-8-channel-relay-board","title":"Waveshare 8-Channel Relay Board","text":"<ul> <li>Relay Type: SPDT (Single Pole Double Throw)</li> <li>Contact Rating: 10A/250VAC, 10A/30VDC</li> <li>Control Voltage: 3.3V/5V compatible</li> <li>Interface: GPIO control via Pi header</li> </ul>"},{"location":"hardware/#usb-sd-mux-fast-specifications","title":"USB-SD-Mux FAST Specifications","text":"<ul> <li>Switching Speed: &lt;1 second</li> <li>USB Interface: USB 3.0 SuperSpeed</li> <li>SD Card Support: SDHC/SDXC up to 2TB</li> <li>Remote Control: Software-controlled switching</li> </ul>"},{"location":"hardware/#software-integration","title":"Software Integration","text":""},{"location":"hardware/#jumpstarter-integration","title":"Jumpstarter Integration","text":"<pre><code>from jumpstarter.hardware import PiLinkBoard\n\n# Initialize Pi-Link Board\nboard = PiLinkBoard(\n    hostname=\"pi-link-001.local\",\n    relay_channels=8,\n    sd_mux=True,\n    serial_console=True\n)\n\n# Power cycle with DIP switch configuration\nboard.power_off()\nboard.set_dip_switches([1, 0, 1, 0, 1, 0, 0])  # Configure boot mode\nboard.flash_sd_card(\"firmware_v2.1.img\")\nboard.power_on()\n\n# Monitor console output\nconsole_log = board.read_console(timeout=30)\nprint(f\"Boot log: {console_log}\")\n</code></pre>"},{"location":"hardware/#configuration-management","title":"Configuration Management","text":"<pre><code># pi-link-config.yaml\nboard:\n  hostname: \"pi-link-001.local\"\n\npower:\n  relay_channel: 1\n  power_on_delay: 2.0\n  power_off_delay: 1.0\n\ndip_switches:\n  relay_channels: [2, 3, 4, 5, 6, 7, 8]\n  boot_modes:\n    normal: [0, 0, 0, 0, 0, 0, 0]\n    recovery: [1, 0, 0, 0, 0, 0, 0]\n    factory: [0, 1, 0, 0, 0, 0, 0]\n    test: [1, 1, 0, 0, 0, 0, 0]\n\nsd_mux:\n  device: \"/dev/usbsdmux-001\"\n  mount_point: \"/mnt/dut-sd\"\n\nconsole:\n  device: \"/dev/ttyUSB0\"\n  baudrate: 115200\n  timeout: 30\n\nnetwork:\n  management:\n    interface: \"eth0\"\n    ip: \"192.168.1.100\"\n  dut:\n    interface: \"eth1\" # USB-Ethernet adapter\n    ip: \"10.0.0.1\"\n    dhcp_range: \"10.0.0.10-10.0.0.50\"\n</code></pre>"},{"location":"hardware/#setup-and-configuration","title":"Setup and Configuration","text":""},{"location":"hardware/#initial-setup","title":"Initial Setup","text":"<ol> <li>Prepare Raspberry Pi:</li> </ol> <pre><code># Flash Raspberry Pi OS\nsudo dd if=raspios-lite.img of=/dev/sdX bs=4M status=progress\n\n# Enable SSH and configure networking\ntouch /boot/ssh\necho 'pi:$encrypted_password' &gt; /boot/userconf.txt\n</code></pre> <ol> <li>Install Dependencies:</li> </ol> <pre><code>sudo apt update\nsudo apt install python3-pip python3-venv git\nsudo pip3 install jumpstarter-pi-link\n</code></pre> <ol> <li>Configure Hardware:    <pre><code># Enable GPIO and serial interfaces\nsudo raspi-config nonint do_spi 0\nsudo raspi-config nonint do_serial 0\nsudo raspi-config nonint do_ssh 0\n</code></pre></li> </ol>"},{"location":"hardware/#relay-board-connection","title":"Relay Board Connection","text":"<pre><code># GPIO Pin Mapping for Waveshare 8-Channel Relay\nRelay 1 (Power): GPIO 26\nRelay 2 (DIP 1): GPIO 20\nRelay 3 (DIP 2): GPIO 21\nRelay 4 (DIP 3): GPIO 22\nRelay 5 (DIP 4): GPIO 23\nRelay 6 (DIP 5): GPIO 24\nRelay 7 (DIP 6): GPIO 25\nRelay 8 (DIP 7): GPIO 27\n</code></pre>"},{"location":"hardware/#use-cases","title":"Use Cases","text":""},{"location":"hardware/#automated-firmware-testing","title":"Automated Firmware Testing","text":"<pre><code># Test multiple firmware versions\nfirmware_images = [\n    \"firmware_v1.0.img\",\n    \"firmware_v1.1.img\",\n    \"firmware_v2.0.img\"\n]\n\nfor image in firmware_images:\n    board.power_off()\n    board.flash_sd_card(image)\n    board.set_dip_switches([0, 0, 0, 0, 0, 0, 0])  # Normal boot\n    board.power_on()\n\n    # Wait for boot and run tests\n    if board.wait_for_boot(timeout=60):\n        test_results = run_firmware_tests(board)\n        log_results(image, test_results)\n</code></pre>"},{"location":"hardware/#boot-mode-testing","title":"Boot Mode Testing","text":"<pre><code># Test different boot configurations\nboot_modes = {\n    \"normal\": [0, 0, 0, 0, 0, 0, 0],\n    \"recovery\": [1, 0, 0, 0, 0, 0, 0],\n    \"factory\": [0, 1, 0, 0, 0, 0, 0]\n}\n\nfor mode, dip_config in boot_modes.items():\n    board.power_off()\n    board.set_dip_switches(dip_config)\n    board.power_on()\n\n    boot_log = board.read_console(timeout=30)\n    validate_boot_mode(mode, boot_log)\n</code></pre>"},{"location":"hardware/#troubleshooting","title":"Troubleshooting","text":""},{"location":"hardware/#common-issues","title":"Common Issues","text":"<ol> <li>Relay Not Switching</li> <li>Check GPIO pin connections</li> <li>Verify relay board power supply</li> <li> <p>Test individual GPIO pins</p> </li> <li> <p>SD-Mux Not Working</p> </li> <li>Check USB connection</li> <li>Verify device permissions</li> <li> <p>Update usbsdmux firmware</p> </li> <li> <p>Console Not Accessible</p> </li> <li>Check USB-serial adapter connection</li> <li>Verify device permissions (<code>sudo usermod -a -G dialout $USER</code>)</li> <li> <p>Test with different baud rates</p> </li> <li> <p>Network Issues</p> </li> <li>Verify USB-Ethernet adapter driver</li> <li>Check network configuration</li> <li>Test connectivity with ping</li> </ol>"},{"location":"hardware/#debug-commands","title":"Debug Commands","text":"<pre><code># Test relay control\ngpio -g mode 26 out\ngpio -g write 26 1  # Turn on relay 1\ngpio -g write 26 0  # Turn off relay 1\n\n# Check SD-Mux status\nusbsdmux /dev/usbsdmux-001 get\n\n# Test serial console\nminicom -D /dev/ttyUSB0 -b 115200\n\n# Check network interfaces\nip addr show\nping -c 3 10.0.0.10\n</code></pre>"},{"location":"hardware/#safety-and-best-practices","title":"Safety and Best Practices","text":""},{"location":"hardware/#electrical-safety","title":"Electrical Safety","text":"<ul> <li>Use appropriate relay ratings for your DUT power requirements</li> <li>Implement proper isolation between relay contacts and control circuits</li> <li>Add fuses/circuit breakers for overcurrent protection</li> </ul>"},{"location":"hardware/#software-safety","title":"Software Safety","text":"<ul> <li>Implement timeout mechanisms for all operations</li> <li>Add retry logic for hardware communication</li> <li>Log all control operations for debugging</li> </ul>"},{"location":"hardware/#maintenance","title":"Maintenance","text":"<ul> <li>Regular testing of relay switching cycles</li> <li>Periodic cleaning of relay contacts</li> <li>SD card wear monitoring and replacement</li> <li>Network connectivity verification</li> </ul>"},{"location":"hardware/#original-dut-link-board_1","title":"Original DUT Link Board","text":""},{"location":"hardware/#dut-link-firmware","title":"DUT Link Firmware","text":"<p>The firmware is written in Rust and provides low-level hardware control.</p>"},{"location":"hardware/#firmware-architecture","title":"Firmware Architecture","text":"<pre><code>graph TB\n    subgraph \"Firmware Stack\"\n        subgraph \"Application Layer\"\n            APP[Main Control Logic&lt;br/&gt;Command Processing]\n            STATE[State Management&lt;br/&gt;Device Status]\n        end\n\n        subgraph \"Protocol Layer\"\n            COMM[Communication Handler&lt;br/&gt;USB/Ethernet]\n            CMD[Command Parser&lt;br/&gt;Message Routing]\n            RESP[Response Generator&lt;br/&gt;Status Reporting]\n        end\n\n        subgraph \"Driver Layer\"\n            GPIO_DRV[GPIO Driver]\n            UART_DRV[UART Driver]\n            SPI_DRV[SPI Driver]\n            I2C_DRV[I2C Driver]\n            USB_DRV[USB Driver]\n            PWR_DRV[Power Driver]\n        end\n\n        subgraph \"HAL Layer\"\n            HAL[Hardware Abstraction&lt;br/&gt;STM32 HAL]\n            RTOS[Real-time Kernel&lt;br/&gt;Embedded Runtime]\n        end\n    end\n\n    APP --&gt; CMD\n    STATE --&gt; RESP\n    CMD --&gt; COMM\n    RESP --&gt; COMM\n\n    CMD --&gt; GPIO_DRV\n    CMD --&gt; UART_DRV\n    CMD --&gt; SPI_DRV\n    CMD --&gt; I2C_DRV\n    CMD --&gt; USB_DRV\n    CMD --&gt; PWR_DRV\n\n    GPIO_DRV --&gt; HAL\n    UART_DRV --&gt; HAL\n    SPI_DRV --&gt; HAL\n    I2C_DRV --&gt; HAL\n    USB_DRV --&gt; HAL\n    PWR_DRV --&gt; HAL\n\n    HAL --&gt; RTOS\n\n    style APP fill:#e1f5fe\n    style COMM fill:#fff3e0\n    style HAL fill:#e8f5e8\n    style RTOS fill:#ffebee</code></pre>"},{"location":"hardware/#features_1","title":"Features","text":"<ul> <li>Real-time operation</li> <li>Low latency communication</li> <li>Robust error handling</li> <li>Firmware update capability</li> </ul>"},{"location":"hardware/#communication-protocol","title":"Communication Protocol","text":"<p>The firmware uses a custom protocol over USB/Ethernet:</p> <pre><code>#[derive(Debug, Serialize, Deserialize)]\npub enum Command {\n    PowerOn { port: u8 },\n    PowerOff { port: u8 },\n    ReadGpio { pin: u8 },\n    WriteGpio { pin: u8, value: bool },\n    // ... more commands\n}\n</code></pre>"},{"location":"hardware/#setup-and-configuration_1","title":"Setup and Configuration","text":""},{"location":"hardware/#initial-setup_1","title":"Initial Setup","text":"<ol> <li>Connect the DUT Link Board to your host system</li> <li>Flash the firmware using the programming interface</li> <li>Configure network settings if using Ethernet</li> </ol>"},{"location":"hardware/#firmware-updates","title":"Firmware Updates","text":"<p>Update firmware using the built-in bootloader:</p> <pre><code>jumpstarter firmware update dutlink-board.bin\n</code></pre>"},{"location":"hardware/#calibration","title":"Calibration","text":"<p>Calibrate voltage and current measurements:</p> <pre><code>jumpstarter calibrate --board dutlink-001\n</code></pre>"},{"location":"hardware/#troubleshooting_1","title":"Troubleshooting","text":""},{"location":"hardware/#common-issues_1","title":"Common Issues","text":"<ol> <li>Board Not Detected</li> <li>Check USB/Ethernet connections</li> <li>Verify drivers are installed</li> <li> <p>Check power supply</p> </li> <li> <p>Communication Errors</p> </li> <li>Verify firmware version compatibility</li> <li>Check cable integrity</li> <li> <p>Review network configuration</p> </li> <li> <p>Power Issues</p> </li> <li>Check input voltage (12V \u00b15%)</li> <li>Verify current limits</li> <li>Check for short circuits</li> </ol>"},{"location":"hardware/#debug-tools","title":"Debug Tools","text":"<ul> <li>Status LEDs: Indicate board state</li> <li>Debug UART: Low-level debugging</li> <li>Web Interface: Configuration and monitoring</li> </ul>"},{"location":"hardware/#extension-and-customization","title":"Extension and Customization","text":""},{"location":"hardware/#custom-drivers","title":"Custom Drivers","text":"<p>Add support for new devices:</p> <pre><code>impl DeviceDriver for CustomDevice {\n    fn initialize(&amp;mut self) -&gt; Result&lt;(), Error&gt; {\n        // Implementation\n        Ok(())\n    }\n\n    fn reset(&amp;mut self) -&gt; Result&lt;(), Error&gt; {\n        // Implementation\n        Ok(())\n    }\n}\n</code></pre>"},{"location":"hardware/#expansion-boards","title":"Expansion Boards","text":"<p>Create expansion boards for specialized testing:</p> <ul> <li>Analog test interfaces</li> <li>High-speed digital interfaces</li> <li>RF test capabilities</li> <li>Environmental sensors</li> </ul>"},{"location":"hardware/#safety-considerations","title":"Safety Considerations","text":"<ul> <li>Always verify connections before powering on</li> <li>Use appropriate current limits</li> <li>Follow ESD protection procedures</li> <li>Ensure proper grounding</li> </ul>"},{"location":"installation/","title":"Installation Guide","text":"<p>This guide will help you install and set up the Jumpstarter monorepo for development or production use.</p>"},{"location":"installation/#installation-overview","title":"Installation Overview","text":"<pre><code>flowchart TD\n    START[Start Installation]\n    CHECK[Check Prerequisites]\n    CLONE[Clone Repository]\n    SETUP[Run make setup]\n\n    subgraph \"Multi-language Setup\"\n        PY_SETUP[Python Setup&lt;br/&gt;UV + Dependencies]\n        GO_SETUP[Go Setup&lt;br/&gt;Modules + Tools]\n        RUST_SETUP[Rust Setup&lt;br/&gt;Cargo + Toolchain]\n        WEB_SETUP[Web Setup&lt;br/&gt;NPM + Node]\n    end\n\n    BUILD[Build All Components]\n    TEST[Run Tests]\n    VERIFY[Installation Complete]\n\n    START --&gt; CHECK\n    CHECK --&gt; CLONE\n    CLONE --&gt; SETUP\n    SETUP --&gt; PY_SETUP\n    SETUP --&gt; GO_SETUP\n    SETUP --&gt; RUST_SETUP\n    SETUP --&gt; WEB_SETUP\n\n    PY_SETUP --&gt; BUILD\n    GO_SETUP --&gt; BUILD\n    RUST_SETUP --&gt; BUILD\n    WEB_SETUP --&gt; BUILD\n\n    BUILD --&gt; TEST\n    TEST --&gt; VERIFY\n\n    CHECK --&gt;|Missing Prerequisites| INSTALL_DEPS[Install Prerequisites]\n    INSTALL_DEPS --&gt; CLONE\n\n    BUILD --&gt;|Failed| DEBUG[Debug Build Issues]\n    DEBUG --&gt; BUILD\n\n    TEST --&gt;|Failed| DEBUG_TEST[Debug Test Issues]\n    DEBUG_TEST --&gt; TEST\n\n    style START fill:#e8f5e8\n    style VERIFY fill:#e1f5fe\n    style SETUP fill:#fff3e0</code></pre>"},{"location":"installation/#prerequisites","title":"Prerequisites","text":""},{"location":"installation/#system-requirements","title":"System Requirements","text":"<ul> <li>Python 3.12 or later</li> <li>Go 1.22 or later</li> <li>Rust (latest stable)</li> <li>Node.js 18 or later</li> <li>Git</li> </ul>"},{"location":"installation/#tools","title":"Tools","text":"<ul> <li>uv - Python package manager</li> <li>Make - Build orchestration</li> <li>Docker (optional) - For containerized development</li> </ul>"},{"location":"installation/#prerequisites-installation-flow","title":"Prerequisites Installation Flow","text":"<pre><code>graph LR\n    subgraph \"Package Managers\"\n        UV[Install UV&lt;br/&gt;Python Package Manager]\n        GO_INST[Install Go&lt;br/&gt;1.22+]\n        RUST_INST[Install Rust&lt;br/&gt;via rustup]\n        NODE_INST[Install Node.js&lt;br/&gt;18+]\n    end\n\n    subgraph \"Development Tools\"\n        MAKE[Install Make]\n        GIT[Install Git]\n        DOCKER[Install Docker&lt;br/&gt;Optional]\n    end\n\n    subgraph \"Verification\"\n        CHECK_TOOLS[Verify Installations&lt;br/&gt;make --version&lt;br/&gt;git --version&lt;br/&gt;etc.]\n    end\n\n    UV --&gt; CHECK_TOOLS\n    GO_INST --&gt; CHECK_TOOLS\n    RUST_INST --&gt; CHECK_TOOLS\n    NODE_INST --&gt; CHECK_TOOLS\n    MAKE --&gt; CHECK_TOOLS\n    GIT --&gt; CHECK_TOOLS\n    DOCKER --&gt; CHECK_TOOLS\n\n    style CHECK_TOOLS fill:#e8f5e8</code></pre>"},{"location":"installation/#quick-setup","title":"Quick Setup","text":"<ol> <li>Clone the repository:</li> </ol> <pre><code>git clone https://github.com/the78mole/jumpstarter-mono.git\ncd jumpstarter-mono\n</code></pre> <ol> <li>Run the setup command:    <pre><code>make setup\n</code></pre></li> </ol> <p>This will install all dependencies for all components in the monorepo.</p>"},{"location":"installation/#component-specific-setup","title":"Component-specific Setup","text":""},{"location":"installation/#component-build-dependencies","title":"Component Build Dependencies","text":"<pre><code>graph TB\n    subgraph \"Python Ecosystem\"\n        PY_PROJ[pyproject.toml&lt;br/&gt;Workspace Config]\n        UV_LOCK[uv.lock&lt;br/&gt;Dependency Lock]\n        PY_COMP[Python Components&lt;br/&gt;core/jumpstarter&lt;br/&gt;templates/driver]\n    end\n\n    subgraph \"Go Ecosystem\"\n        GO_WORK[go.work&lt;br/&gt;Workspace Config]\n        GO_MOD[go.mod files&lt;br/&gt;Module Definitions]\n        GO_COMP[Go Components&lt;br/&gt;core/controller&lt;br/&gt;lab-config]\n    end\n\n    subgraph \"Rust Ecosystem\"\n        CARGO_TOML[Cargo.toml&lt;br/&gt;Package Config]\n        CARGO_LOCK[Cargo.lock&lt;br/&gt;Dependency Lock]\n        RUST_COMP[Rust Components&lt;br/&gt;hardware/dutlink-firmware]\n    end\n\n    subgraph \"Web Ecosystem\"\n        PACKAGE_JSON[package.json&lt;br/&gt;Package Config]\n        PACKAGE_LOCK[package-lock.json&lt;br/&gt;Dependency Lock]\n        WEB_COMP[Web Components&lt;br/&gt;integrations/vscode]\n    end\n\n    PY_PROJ --&gt; UV_LOCK\n    UV_LOCK --&gt; PY_COMP\n\n    GO_WORK --&gt; GO_MOD\n    GO_MOD --&gt; GO_COMP\n\n    CARGO_TOML --&gt; CARGO_LOCK\n    CARGO_LOCK --&gt; RUST_COMP\n\n    PACKAGE_JSON --&gt; PACKAGE_LOCK\n    PACKAGE_LOCK --&gt; WEB_COMP\n\n    style PY_PROJ fill:#e1f5fe\n    style GO_WORK fill:#f3e5f5\n    style CARGO_TOML fill:#fff3e0\n    style PACKAGE_JSON fill:#e8f5e8</code></pre>"},{"location":"installation/#python-components","title":"Python Components","text":"<p>Python components use <code>uv</code> for dependency management:</p> <pre><code>make build-python\n</code></pre>"},{"location":"installation/#go-components","title":"Go Components","text":"<p>Go components are managed with Go modules:</p> <pre><code>make build-go\n</code></pre>"},{"location":"installation/#rust-components","title":"Rust Components","text":"<p>Rust components use Cargo:</p> <pre><code>make build-rust\n</code></pre>"},{"location":"installation/#web-components","title":"Web Components","text":"<p>TypeScript/Node.js components use npm:</p> <pre><code>make build-web\n</code></pre>"},{"location":"installation/#verification","title":"Verification","text":"<p>To verify your installation:</p> <pre><code>make test\n</code></pre>"},{"location":"installation/#next-steps","title":"Next Steps","text":"<ul> <li>Development Guide - Learn about the development workflow</li> <li>Architecture - Understand the system design</li> </ul>"},{"location":"integrations/","title":"Integrations","text":"<p>This section covers integrations with CI/CD systems and development tools.</p>"},{"location":"integrations/#integration-architecture-overview","title":"Integration Architecture Overview","text":"<pre><code>graph TB\n    subgraph \"CI/CD Platforms\"\n        TEKTON[Tekton Pipelines&lt;br/&gt;K8s Native CI/CD]\n        GITHUB[GitHub Actions&lt;br/&gt;Cloud CI/CD]\n        JENKINS[Jenkins&lt;br/&gt;Self-hosted CI/CD]\n    end\n\n    subgraph \"Development Tools\"\n        VSCODE[VS Code Extension&lt;br/&gt;Editor Integration]\n        DEVSPACE[DevSpace&lt;br/&gt;Development Environment]\n        DOCKER[Docker Images&lt;br/&gt;Containerized Deployment]\n    end\n\n    subgraph \"Jumpstarter Core\"\n        CONTROLLER[Kubernetes Controller&lt;br/&gt;Go Service]\n        CLI[CLI Tools&lt;br/&gt;Python Library]\n        API[REST API&lt;br/&gt;Integration Interface]\n    end\n\n    subgraph \"Monitoring &amp; Observability\"\n        PROMETHEUS[Prometheus&lt;br/&gt;Metrics Collection]\n        GRAFANA[Grafana&lt;br/&gt;Visualization]\n        LOGGING[Centralized Logging&lt;br/&gt;ELK Stack]\n    end\n\n    subgraph \"Hardware Layer\"\n        HARDWARE[DUT Link Boards&lt;br/&gt;Physical Hardware]\n        DEVICES[Test Devices&lt;br/&gt;Under Test]\n    end\n\n    TEKTON --&gt; CONTROLLER\n    GITHUB --&gt; CLI\n    JENKINS --&gt; API\n\n    VSCODE --&gt; CLI\n    DEVSPACE --&gt; CONTROLLER\n    DOCKER --&gt; CONTROLLER\n\n    CONTROLLER --&gt; API\n    CLI --&gt; API\n\n    API --&gt; PROMETHEUS\n    CONTROLLER --&gt; GRAFANA\n    CLI --&gt; LOGGING\n\n    CONTROLLER --&gt; HARDWARE\n    HARDWARE --&gt; DEVICES\n\n    style CONTROLLER fill:#f3e5f5\n    style CLI fill:#e1f5fe\n    style API fill:#fff3e0\n    style HARDWARE fill:#ffebee</code></pre>"},{"location":"integrations/#cicd-integrations","title":"CI/CD Integrations","text":""},{"location":"integrations/#tekton-pipelines","title":"Tekton Pipelines","text":"<p>Tekton tasks and pipelines for cloud-native CI/CD.</p> <pre><code>graph LR\n    subgraph \"Tekton Pipeline Flow\"\n        TRIGGER[Pipeline Trigger&lt;br/&gt;Git Push/PR]\n        PROVISION[Device Provision&lt;br/&gt;Task]\n        BUILD[Build &amp; Test&lt;br/&gt;Task]\n        HARDWARE[Hardware Test&lt;br/&gt;Task]\n        REPORT[Results Report&lt;br/&gt;Task]\n        CLEANUP[Cleanup&lt;br/&gt;Task]\n    end\n\n    TRIGGER --&gt; PROVISION\n    PROVISION --&gt; BUILD\n    BUILD --&gt; HARDWARE\n    HARDWARE --&gt; REPORT\n    REPORT --&gt; CLEANUP\n\n    style PROVISION fill:#e8f5e8\n    style HARDWARE fill:#fff3e0\n    style REPORT fill:#e1f5fe</code></pre>"},{"location":"integrations/#available-tasks","title":"Available Tasks","text":"<ul> <li>jumpstarter-test: Run hardware tests in Tekton pipelines</li> <li>device-provision: Provision test devices</li> <li>results-collect: Collect and process test results</li> </ul>"},{"location":"integrations/#example-pipeline","title":"Example Pipeline","text":"<pre><code>apiVersion: tekton.dev/v1beta1\nkind: Pipeline\nmetadata:\n  name: hardware-test-pipeline\nspec:\n  params:\n    - name: device-config\n      type: string\n  tasks:\n    - name: provision-device\n      taskRef:\n        name: device-provision\n      params:\n        - name: config\n          value: $(params.device-config)\n    - name: run-tests\n      runAfter: [provision-device]\n      taskRef:\n        name: jumpstarter-test\n      params:\n        - name: test-suite\n          value: integration\n</code></pre>"},{"location":"integrations/#github-actions-integration-flow","title":"GitHub Actions Integration Flow","text":"<pre><code>sequenceDiagram\n    participant Dev as Developer\n    participant GH as GitHub\n    participant Runner as Self-hosted Runner\n    participant JS as Jumpstarter\n    participant HW as Hardware\n\n    Dev-&gt;&gt;GH: Push code/Create PR\n    GH-&gt;&gt;Runner: Trigger workflow\n    Runner-&gt;&gt;JS: Setup Jumpstarter\n    Runner-&gt;&gt;JS: Configure devices\n    JS-&gt;&gt;HW: Provision hardware\n    JS-&gt;&gt;HW: Execute tests\n    HW--&gt;&gt;JS: Test results\n    JS--&gt;&gt;Runner: Aggregate results\n    Runner--&gt;&gt;GH: Upload artifacts\n    GH--&gt;&gt;Dev: Show test results</code></pre>"},{"location":"integrations/#available-actions","title":"Available Actions","text":"<ul> <li><code>jumpstarter-dev/setup-action</code>: Setup Jumpstarter environment</li> <li><code>jumpstarter-dev/test-action</code>: Run hardware tests</li> <li><code>jumpstarter-dev/report-action</code>: Generate test reports</li> </ul>"},{"location":"integrations/#example-workflow","title":"Example Workflow","text":"<pre><code>name: Hardware CI\non: [push, pull_request]\n\njobs:\n  hardware-tests:\n    runs-on: self-hosted\n    steps:\n      - uses: actions/checkout@v4\n      - uses: jumpstarter-dev/setup-action@v1\n        with:\n          version: latest\n      - uses: jumpstarter-dev/test-action@v1\n        with:\n          config: tests/ci-config.yaml\n          devices: raspberry-pi,arduino\n      - uses: jumpstarter-dev/report-action@v1\n        if: always()\n        with:\n          format: junit\n</code></pre>"},{"location":"integrations/#development-environment-integrations","title":"Development Environment Integrations","text":""},{"location":"integrations/#vs-code-extension-architecture","title":"VS Code Extension Architecture","text":"<pre><code>graph TB\n    subgraph \"VS Code Extension\"\n        UI[Extension UI&lt;br/&gt;Panels &amp; Views]\n        LANG[Language Support&lt;br/&gt;YAML, Python]\n        DEBUG[Debug Interface&lt;br/&gt;Breakpoints]\n        TERM[Integrated Terminal&lt;br/&gt;CLI Integration]\n    end\n\n    subgraph \"Language Server\"\n        LSP[Language Server&lt;br/&gt;Protocol]\n        VALIDATE[Config Validation&lt;br/&gt;Real-time]\n        INTELLISENSE[IntelliSense&lt;br/&gt;Completions]\n    end\n\n    subgraph \"Jumpstarter Integration\"\n        CLI_INT[CLI Integration&lt;br/&gt;Command Execution]\n        DEVICE_MGR[Device Manager&lt;br/&gt;Hardware Control]\n        TEST_RUNNER[Test Runner&lt;br/&gt;Execution Engine]\n    end\n\n    UI --&gt; LSP\n    LANG --&gt; VALIDATE\n    DEBUG --&gt; CLI_INT\n    TERM --&gt; CLI_INT\n\n    LSP --&gt; INTELLISENSE\n    VALIDATE --&gt; INTELLISENSE\n\n    CLI_INT --&gt; DEVICE_MGR\n    CLI_INT --&gt; TEST_RUNNER\n\n    style UI fill:#e1f5fe\n    style LSP fill:#fff3e0\n    style CLI_INT fill:#e8f5e8</code></pre> <p>The Jumpstarter VS Code extension provides:</p> <ul> <li>Syntax highlighting for configuration files</li> <li>IntelliSense for test definitions</li> <li>Integrated test runner</li> <li>Device management interface</li> <li>Real-time test monitoring</li> </ul>"},{"location":"integrations/#installation","title":"Installation","text":"<pre><code>code --install-extension jumpstarter.jumpstarter-vscode\n</code></pre>"},{"location":"integrations/#features","title":"Features","text":"<ol> <li>Configuration Validation: Real-time validation of YAML configs</li> <li>Test Runner: Run tests directly from the editor</li> <li>Device Explorer: Browse and manage connected devices</li> <li>Log Viewer: View test logs with syntax highlighting</li> <li>Debugging: Set breakpoints in test scripts</li> </ol>"},{"location":"integrations/#devspace-development-environment","title":"DevSpace Development Environment","text":"<pre><code>graph TB\n    subgraph \"Local Development\"\n        DEV[Developer Workstation]\n        DEVSPACE[DevSpace CLI]\n        CONFIG[devspace.yaml]\n    end\n\n    subgraph \"Kubernetes Cluster\"\n        NAMESPACE[Dev Namespace]\n        CONTROLLER[Controller Pod]\n        RUNNER[Test Runner Pod]\n        STORAGE[Persistent Storage]\n    end\n\n    subgraph \"Development Features\"\n        SYNC[File Sync&lt;br/&gt;Real-time]\n        PORT[Port Forwarding&lt;br/&gt;Local Access]\n        LOGS[Log Streaming&lt;br/&gt;Real-time]\n        SHELL[Remote Shell&lt;br/&gt;Debug Access]\n    end\n\n    DEV --&gt; DEVSPACE\n    DEVSPACE --&gt; CONFIG\n    CONFIG --&gt; NAMESPACE\n\n    NAMESPACE --&gt; CONTROLLER\n    NAMESPACE --&gt; RUNNER\n    NAMESPACE --&gt; STORAGE\n\n    DEVSPACE --&gt; SYNC\n    DEVSPACE --&gt; PORT\n    DEVSPACE --&gt; LOGS\n    DEVSPACE --&gt; SHELL\n\n    SYNC --&gt; CONTROLLER\n    PORT --&gt; CONTROLLER\n    LOGS --&gt; RUNNER\n    SHELL --&gt; RUNNER\n\n    style DEV fill:#e8f5e8\n    style DEVSPACE fill:#e1f5fe\n    style CONTROLLER fill:#fff3e0</code></pre> <p>DevSpace configuration for development environments.</p>"},{"location":"integrations/#setup","title":"Setup","text":"<pre><code># devspace.yaml\nversion: v2beta1\nname: jumpstarter-dev\n\npipelines:\n  dev:\n    run: |\n      start_dev hardware-controller\n      start_dev test-runner\n\ndeployments:\n  hardware-controller:\n    helm:\n      chart:\n        name: jumpstarter-controller\n  test-runner:\n    kubectl:\n      manifests:\n        - k8s/test-runner.yaml\n\ndev:\n  hardware-controller:\n    imageSelector: jumpstarter/controller\n    workingDir: /app\n    ports:\n      - port: \"8080:8080\"\n</code></pre>"},{"location":"integrations/#container-integrations","title":"Container Integrations","text":""},{"location":"integrations/#docker-images","title":"Docker Images","text":"<p>Pre-built Docker images for easy deployment:</p> <ul> <li><code>jumpstarter/controller</code>: Kubernetes controller</li> <li><code>jumpstarter/cli</code>: Command-line interface</li> <li><code>jumpstarter/test-runner</code>: Test execution environment</li> </ul>"},{"location":"integrations/#example-usage","title":"Example Usage","text":"<pre><code># Run CLI in container\ndocker run --rm -v $(pwd):/workspace jumpstarter/cli run tests/\n\n# Start controller\ndocker run -d --name controller jumpstarter/controller\n\n# Run test runner\ndocker run --rm --device /dev/ttyUSB0 jumpstarter/test-runner\n</code></pre>"},{"location":"integrations/#kubernetes-deployment","title":"Kubernetes Deployment","text":"<p>Deploy Jumpstarter in Kubernetes:</p> <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: jumpstarter-controller\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: jumpstarter-controller\n  template:\n    metadata:\n      labels:\n        app: jumpstarter-controller\n    spec:\n      containers:\n        - name: controller\n          image: jumpstarter/controller:latest\n          ports:\n            - containerPort: 8080\n          env:\n            - name: CONFIG_PATH\n              value: /etc/jumpstarter/config.yaml\n</code></pre>"},{"location":"integrations/#monitoring-and-observability","title":"Monitoring and Observability","text":""},{"location":"integrations/#prometheus-metrics","title":"Prometheus Metrics","text":"<p>Jumpstarter exports metrics for monitoring:</p> <ul> <li>Test execution duration</li> <li>Device availability</li> <li>Error rates</li> <li>Queue depth</li> </ul>"},{"location":"integrations/#grafana-dashboards","title":"Grafana Dashboards","text":"<p>Pre-built dashboards for visualization:</p> <ul> <li>Test execution overview</li> <li>Device health monitoring</li> <li>Performance metrics</li> <li>Error analysis</li> </ul>"},{"location":"integrations/#logging-integration","title":"Logging Integration","text":"<p>Integration with logging systems:</p> <ul> <li>Structured JSON logging</li> <li>Correlation IDs for tracing</li> <li>Configurable log levels</li> <li>Log forwarding to external systems</li> </ul>"},{"location":"integrations/#custom-integrations","title":"Custom Integrations","text":""},{"location":"integrations/#plugin-architecture","title":"Plugin Architecture","text":"<p>Create custom integrations using the plugin system:</p> <pre><code>from jumpstarter.plugin import BasePlugin\n\nclass CustomIntegration(BasePlugin):\n    def __init__(self, config):\n        self.config = config\n\n    def on_test_start(self, test_info):\n        # Custom logic for test start\n        pass\n\n    def on_test_complete(self, test_results):\n        # Custom logic for test completion\n        pass\n</code></pre>"},{"location":"integrations/#api-integration","title":"API Integration","text":"<p>REST API for external integrations:</p> <pre><code># Start a test\ncurl -X POST http://localhost:8080/api/v1/tests \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"config\": \"test-config.yaml\"}'\n\n# Get test status\ncurl http://localhost:8080/api/v1/tests/12345/status\n\n# Get test results\ncurl http://localhost:8080/api/v1/tests/12345/results\n</code></pre>"},{"location":"user-guide/","title":"User Guide","text":"<p>This guide provides comprehensive information on using Jumpstarter for testing and automation.</p>"},{"location":"user-guide/#getting-started","title":"Getting Started","text":""},{"location":"user-guide/#basic-concepts","title":"Basic Concepts","text":"<ul> <li>Device Under Test (DUT): The device being tested</li> <li>Test Runner: Executes test scenarios</li> <li>Controller: Manages test orchestration</li> <li>Driver: Interfaces with specific hardware</li> </ul>"},{"location":"user-guide/#your-first-test","title":"Your First Test","text":"<ol> <li> <p>Install Jumpstarter following the Installation Guide</p> </li> <li> <p>Create a simple test configuration:</p> </li> </ol> <pre><code># test-config.yaml\nname: basic-test\ndescription: Basic device test\n\ndevices:\n  - name: my-device\n    type: example-device\n\ntests:\n  - name: power-on-test\n    steps:\n      - action: power-on\n      - action: wait\n        duration: 5s\n      - action: check-status\n</code></pre> <ol> <li>Run the test:    <pre><code>jumpstarter run test-config.yaml\n</code></pre></li> </ol>"},{"location":"user-guide/#configuration","title":"Configuration","text":""},{"location":"user-guide/#device-configuration","title":"Device Configuration","text":"<p>Configure your devices in the device registry:</p> <pre><code>devices:\n  - name: raspberry-pi\n    type: sbc\n    connection:\n      type: ssh\n      host: 192.168.1.100\n      username: pi\n</code></pre>"},{"location":"user-guide/#test-scenarios","title":"Test Scenarios","text":"<p>Define test scenarios with YAML:</p> <pre><code>scenarios:\n  - name: boot-test\n    description: Test device boot sequence\n    steps:\n      - action: power-cycle\n      - action: wait-for-boot\n        timeout: 60s\n      - action: verify-services\n</code></pre>"},{"location":"user-guide/#advanced-features","title":"Advanced Features","text":""},{"location":"user-guide/#custom-drivers","title":"Custom Drivers","text":"<p>Create custom drivers for your hardware:</p> <pre><code>from jumpstarter.driver import BaseDriver\n\nclass MyCustomDriver(BaseDriver):\n    def power_on(self):\n        # Implementation\n        pass\n\n    def power_off(self):\n        # Implementation\n        pass\n</code></pre>"},{"location":"user-guide/#automation-pipelines","title":"Automation Pipelines","text":"<p>Integrate with CI/CD systems:</p> <pre><code># .github/workflows/hardware-test.yml\nname: Hardware Tests\non: [push]\njobs:\n  test:\n    runs-on: self-hosted\n    steps:\n      - uses: actions/checkout@v4\n      - name: Run hardware tests\n        run: jumpstarter run tests/\n</code></pre>"},{"location":"user-guide/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/#common-issues","title":"Common Issues","text":"<ol> <li>Connection Problems</li> <li>Check network connectivity</li> <li>Verify device credentials</li> <li> <p>Ensure firewall settings</p> </li> <li> <p>Driver Issues</p> </li> <li>Verify driver installation</li> <li>Check device compatibility</li> <li> <p>Review driver logs</p> </li> <li> <p>Test Failures</p> </li> <li>Check test configuration</li> <li>Verify device state</li> <li>Review test logs</li> </ol>"},{"location":"user-guide/#debug-mode","title":"Debug Mode","text":"<p>Enable debug mode for detailed logging:</p> <pre><code>jumpstarter --debug run test-config.yaml\n</code></pre>"},{"location":"user-guide/#best-practices","title":"Best Practices","text":"<ol> <li>Test Organization: Group related tests logically</li> <li>Configuration Management: Use version control for configurations</li> <li>Error Handling: Implement proper error handling in tests</li> <li>Documentation: Document custom drivers and test scenarios</li> <li>Monitoring: Set up monitoring for test infrastructure</li> </ol>"}]}