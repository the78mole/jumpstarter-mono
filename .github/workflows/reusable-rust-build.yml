name: Rust Build

on:
  workflow_call:
    inputs:
      working-directory:
        description: "Working directory for the Rust project"
        required: true
        type: string
      rust-toolchain:
        description: "Rust toolchain version"
        required: false
        type: string
        default: "stable"
      targets:
        description: "Additional target platforms (comma-separated)"
        required: false
        type: string
        default: ""
      build-flags:
        description: "Additional build flags for cargo build"
        required: false
        type: string
        default: "--release"
      skip-tests:
        description: "Skip running tests (useful for no_std projects)"
        required: false
        type: boolean
        default: false
      clippy-flags:
        description: "Additional flags for cargo clippy"
        required: false
        type: string
        default: "--all-targets --all-features"
      clippy-warnings:
        description: "How to handle clippy warnings: 'deny' to fail on warnings, 'warn' to allow warnings"
        required: false
        type: string
        default: "deny"

  workflow_dispatch:
    inputs:
      working-directory:
        description: "Working directory for the Rust project"
        required: true
        type: string
      rust-toolchain:
        description: "Rust toolchain version"
        required: false
        type: string
        default: "stable"
      targets:
        description: "Additional target platforms (comma-separated)"
        required: false
        type: string
        default: ""
      build-flags:
        description: "Additional build flags for cargo build"
        required: false
        type: string
        default: "--release"
      skip-tests:
        description: "Skip running tests (useful for no_std projects)"
        required: false
        type: boolean
        default: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ inputs.rust-toolchain }}
          targets: ${{ inputs.targets }}
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles(format('{0}/**/Cargo.lock', inputs.working-directory)) }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles(format('{0}/**/Cargo.lock', inputs.working-directory)) }}
          restore-keys: |
            ${{ runner.os }}-cargo-index-

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: ${{ inputs.working-directory }}/target
          key: ${{ runner.os }}-cargo-build-${{ inputs.working-directory }}-${{ hashFiles(format('{0}/**/Cargo.lock', inputs.working-directory)) }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-${{ inputs.working-directory }}-

      - name: Check formatting
        working-directory: ${{ inputs.working-directory }}
        run: |
          # Check if we're in a directory with Cargo.toml or need to search subdirectories
          if [ -f "Cargo.toml" ]; then
            cargo fmt --all -- --check
          else
            # Find all Cargo.toml files in subdirectories and format each project
            for dir in */; do
              if [ -f "${dir}Cargo.toml" ]; then
                # Skip bootloader directory due to stm32f4xx-hal breaking changes
                if [ "$dir" = "bootloader/" ]; then
                  echo "Skipping fmt in ${dir} (known stm32f4xx-hal compatibility issues)"
                  continue
                fi
                echo "Checking formatting in ${dir}"
                (cd "$dir" && cargo fmt --all -- --check)
              fi
            done
          fi

      - name: Run clippy
        working-directory: ${{ inputs.working-directory }}
        run: |
          CLIPPY_WARNING_FLAG="-D warnings"
          if [ "${{ inputs.clippy-warnings }}" = "warn" ]; then
            CLIPPY_WARNING_FLAG=""
          fi

          echo "DEBUG: clippy-warnings input = '${{ inputs.clippy-warnings }}'"
          echo "DEBUG: CLIPPY_WARNING_FLAG = '$CLIPPY_WARNING_FLAG'"

          if [ -f "Cargo.toml" ]; then
            echo "DEBUG: Running: cargo clippy ${{ inputs.clippy-flags }} -- $CLIPPY_WARNING_FLAG"
            cargo clippy ${{ inputs.clippy-flags }} -- $CLIPPY_WARNING_FLAG
          else
            for dir in */; do
              if [ -f "${dir}Cargo.toml" ]; then
                # Skip bootloader directory due to stm32f4xx-hal breaking changes
                if [ "$dir" = "bootloader/" ]; then
                  echo "Skipping clippy in ${dir} (known stm32f4xx-hal compatibility issues)"
                  continue
                fi
                echo "Running clippy in ${dir}"
                echo "DEBUG: Running: cargo clippy ${{ inputs.clippy-flags }} -- $CLIPPY_WARNING_FLAG"
                (cd "$dir" && cargo clippy ${{ inputs.clippy-flags }} -- $CLIPPY_WARNING_FLAG)
              fi
            done
          fi

      - name: Run tests
        if: ${{ !inputs.skip-tests }}
        working-directory: ${{ inputs.working-directory }}
        run: |
          if [ -f "Cargo.toml" ]; then
            cargo test
          else
            for dir in */; do
              if [ -f "${dir}Cargo.toml" ]; then
                echo "Running tests in ${dir}"
                (cd "$dir" && cargo test)
              fi
            done
          fi

      - name: Build
        working-directory: ${{ inputs.working-directory }}
        run: |
          if [ -f "Cargo.toml" ]; then
            cargo build ${{ inputs.build-flags }}
          else
            for dir in */; do
              if [ -f "${dir}Cargo.toml" ]; then
                # Skip bootloader directory due to stm32f4xx-hal breaking changes
                if [ "$dir" = "bootloader/" ]; then
                  echo "Skipping build in ${dir} (known stm32f4xx-hal compatibility issues)"
                  continue
                fi
                echo "Building in ${dir}"
                (cd "$dir" && cargo build ${{ inputs.build-flags }})
              fi
            done
          fi
