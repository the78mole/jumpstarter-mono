---
name: CI

on:
  push:
    branches: [main, develop, "release-*"]
    # Remove tag triggers - we'll create tags automatically
  pull_request:
    branches: [main, "release-*"]
  merge_group: {}
  workflow_dispatch: {}

env:
  CARGO_TERM_COLOR: always

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Detect what components have changed to optimize build times
  detect-changes:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required for creating tags
      actions: read    # Required for reading workflow artifacts
    outputs:
      python: ${{ steps.changes.outputs.python }}
      go: ${{ steps.changes.outputs.go }}
      rust: ${{ steps.changes.outputs.rust }}
      web: ${{ steps.changes.outputs.web }}
      docs: ${{ steps.changes.outputs.docs }}
      ci: ${{ steps.changes.outputs.ci }}
      containers: ${{ steps.changes.outputs.containers }}
      version: ${{ steps.semver.outputs.version }}
      version-tag: ${{ steps.semver.outputs.version_tag }}
      container-tag: ${{ steps.version-config.outputs.container-tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for semantic versioning

      - name: Determine version format and PR number
        id: version-config
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            PR_NUMBER="${{ github.event.number }}"
            VERSION_FORMAT="\${major}.\${minor}.\${patch}-pr-${PR_NUMBER}-\${increment}"
            # For PRs, use the head branch name normalized for container tags
            CONTAINER_TAG=$(echo "${{ github.head_ref }}" | sed 's/[^a-zA-Z0-9._-]/-/g')
            echo "version-format=${VERSION_FORMAT}" >> $GITHUB_OUTPUT
            echo "pr-number=${PR_NUMBER}" >> $GITHUB_OUTPUT
            echo "is-pr=true" >> $GITHUB_OUTPUT
            echo "container-tag=${CONTAINER_TAG}" >> $GITHUB_OUTPUT
            echo "🔀 Pull Request detected: #${PR_NUMBER}"
            echo "🐳 Container tag: ${CONTAINER_TAG}"
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            VERSION_FORMAT="\${major}.\${minor}.\${patch}"
            CONTAINER_TAG="latest"
            echo "version-format=${VERSION_FORMAT}" >> $GITHUB_OUTPUT
            echo "pr-number=" >> $GITHUB_OUTPUT
            echo "is-pr=false" >> $GITHUB_OUTPUT
            echo "container-tag=${CONTAINER_TAG}" >> $GITHUB_OUTPUT
            echo "🚀 Main branch detected - clean version format"
            echo "🐳 Container tag: ${CONTAINER_TAG}"
          else
            # Other branches (develop, feature, etc.)
            BRANCH_NAME=$(echo "${{ github.ref_name }}" | sed 's/[^a-zA-Z0-9]/-/g' | tr '[:upper:]' '[:lower:]')
            VERSION_FORMAT="\${major}.\${minor}.\${patch}-${BRANCH_NAME}-\${increment}"
            CONTAINER_TAG=$(echo "${{ github.ref_name }}" | sed 's/[^a-zA-Z0-9._-]/-/g')
            echo "version-format=${VERSION_FORMAT}" >> $GITHUB_OUTPUT
            echo "pr-number=" >> $GITHUB_OUTPUT
            echo "is-pr=false" >> $GITHUB_OUTPUT
            echo "container-tag=${CONTAINER_TAG}" >> $GITHUB_OUTPUT
            echo "🌿 Branch '${BRANCH_NAME}' detected"
            echo "🐳 Container tag: ${CONTAINER_TAG}"
          fi

          echo "Version format: $(cat $GITHUB_OUTPUT | grep version-format | cut -d= -f2-)"

      - name: Calculate semantic version
        id: semver
        uses: paulhatch/semantic-version@v5.4.0
        with:
          tag_prefix: "mono-v"
          major_pattern: "/(feat|fix|refactor)!:/"
          minor_pattern: "/^feat:/"
          version_format: ${{ steps.version-config.outputs.version-format }}
          bump_each_commit: ${{ github.ref == 'refs/heads/main' }}
          search_commit_body: true
          user_format_type: "csv"

      - name: Debug semantic version
        run: |
          echo "Semantic version: ${{ steps.semver.outputs.version }}"
          echo "Version tag: ${{ steps.semver.outputs.version_tag }}"
          echo "Major: ${{ steps.semver.outputs.major }}"
          echo "Minor: ${{ steps.semver.outputs.minor }}"
          echo "Patch: ${{ steps.semver.outputs.patch }}"
          echo "Increment: ${{ steps.semver.outputs.increment }}"
          echo "Branch: ${{ github.ref }}"
          echo "Bump each commit: ${{ github.ref == 'refs/heads/main' }}"

      - name: Generate version summary
        run: |
          cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          ## 📋 Semantic Versioning Summary

          | Field | Value |
          |-------|-------|
          | **Version** | `${{ steps.semver.outputs.version }}` |
          | **Version Tag** | `${{ steps.semver.outputs.version_tag }}` |
          | **Major** | `${{ steps.semver.outputs.major }}` |
          | **Minor** | `${{ steps.semver.outputs.minor }}` |
          | **Patch** | `${{ steps.semver.outputs.patch }}` |
          | **Increment** | `${{ steps.semver.outputs.increment }}` |

          ### 🔍 Versioning Configuration
          - **Tag Prefix**: `mono-v`
          - **Major Pattern**: `/(feat|fix|refactor)!:/` (Breaking changes)
          - **Minor Pattern**: `/^feat:/` (New features)
          - **Version Format**: `${{ steps.version-config.outputs.version-format }}`
          - **Bump Each Commit**: `${{ github.ref == 'refs/heads/main' }}` (Main: true, PRs: false)

          ### 📈 Version Calculation
          - Uses conventional commit patterns for automated versioning
          - Major: Breaking changes marked with `!` after type (e.g., `feat!:`, `fix!:`)
          - Minor: New features with `feat:` prefix
          - Patch: All other changes (`fix:`, `refactor:`, etc.)
          - **Main Branch**: Every commit increments version
          - **PR Branches**: Only final merge increments version

          EOF

      - name: Check for changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          base: ${{ env.ACT && 'main' || '' }}
          filters: |
            python:
              - 'core/jumpstarter/**'
              - 'templates/driver/**'
              - 'pyproject.toml'
              - 'uv.lock'
              - '.github/workflows/reusable-python-*.yml'
            go:
              - 'core/controller/**'
              - 'lab-config/**'
              - 'go.work'
              - 'go.work.sum'
              - '.github/workflows/reusable-go-*.yml'
            rust:
              - 'hardware/dutlink-firmware/**'
            web:
              - 'integrations/vscode/**'
            docs:
              - 'docs/**'
              - 'mkdocs.yml'
              - '*.md'
            ci:
              - '.github/workflows/**'
              - 'Makefile'
            containers:
              - '.github/containers/**'
              - '.github/workflows/ci-containers.yml'

      - name: Create automatic release tag (main branch only)
        if: >
          github.ref == 'refs/heads/main' &&
          github.event_name == 'push' &&
          !env.ACT
        run: |
          # Calculate the next version for main branch pushes
          CURRENT_VERSION="${{ steps.semver.outputs.version }}"
          VERSION_TAG="${{ steps.semver.outputs.version_tag }}"

          echo "🚀 Auto-creating release tag for main branch push"
          echo "Current version: $CURRENT_VERSION"
          echo "Release tag: $VERSION_TAG"

          # Configure git for the action
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # Create and push the tag
          git tag "$VERSION_TAG" -m "Automatic release $CURRENT_VERSION"
          git push origin "$VERSION_TAG"

          echo "✅ Created and pushed tag: $VERSION_TAG"

          # Add to step summary
          cat >> $GITHUB_STEP_SUMMARY << EOF
          ## 🏷️ Automatic Release Tag Created

          **Tag**: \`$VERSION_TAG\`
          **Version**: \`$CURRENT_VERSION\`
          **Trigger**: Main branch push
          **Commit**: \`${{ github.sha }}\`

          This will trigger an automatic release workflow.
          EOF
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Build CI container images if needed
  build-containers:
    needs: detect-changes
    if: >
      needs.detect-changes.outputs.containers == 'true' ||
      needs.detect-changes.outputs.ci == 'true' ||
      github.event_name == 'workflow_dispatch'
    permissions:
      contents: read
      packages: write
    uses: ./.github/workflows/ci-containers.yml
    with:
      force-rebuild: ${{ github.event_name == 'workflow_dispatch' }}

  # Check for typos across the repository
  typos:
    needs: detect-changes
    if: >
      needs.detect-changes.outputs.ci == 'true' ||
      github.event_name == 'workflow_dispatch'
    uses: ./.github/workflows/reusable-typos.yml

  # === LINTING JOBS ===

  # Python components
  python-lint:
    needs: [detect-changes, build-containers]
    if: >
      always() &&
      (needs.detect-changes.outputs.python == 'true' ||
       needs.detect-changes.outputs.ci == 'true' ||
       github.event_name == 'workflow_dispatch') &&
      (needs.build-containers.result == 'success' ||
       needs.build-containers.result == 'skipped')
    uses: ./.github/workflows/reusable-python-lint.yml
    with:
      working-directory: core/jumpstarter
      use-container: true  # Use pre-built CI containers for faster builds

  # Go components
  controller-lint:
    needs: [detect-changes, build-containers]
    if: >
      always() &&
      (needs.detect-changes.outputs.go == 'true' ||
       needs.detect-changes.outputs.ci == 'true' ||
       github.event_name == 'workflow_dispatch') &&
      (needs.build-containers.result == 'success' ||
       needs.build-containers.result == 'skipped')
    uses: ./.github/workflows/reusable-go-lint.yml
    with:
      working-directory: core/controller
      use-container: true  # Use pre-built CI containers for faster builds
      container-tag: ${{ needs.detect-changes.outputs.container-tag }}

  lab-config-lint:
    needs: [detect-changes, build-containers]
    if: >
      always() &&
      (needs.detect-changes.outputs.go == 'true' ||
       needs.detect-changes.outputs.ci == 'true' ||
       github.event_name == 'workflow_dispatch') &&
      (needs.build-containers.result == 'success' ||
       needs.build-containers.result == 'skipped')
    uses: ./.github/workflows/reusable-go-lint.yml
    with:
      working-directory: lab-config
      use-container: true  # Use pre-built CI containers for faster builds
      container-tag: ${{ needs.detect-changes.outputs.container-tag }}

  # === TESTING JOBS ===

  # Python components
  python-test:
    needs: [detect-changes, build-containers]
    if: >
      always() &&
      (needs.detect-changes.outputs.python == 'true' ||
       needs.detect-changes.outputs.ci == 'true' ||
       github.event_name == 'workflow_dispatch') &&
      (needs.build-containers.result == 'success' ||
       needs.build-containers.result == 'skipped')
    uses: ./.github/workflows/reusable-python-test.yml
    with:
      working-directory: core/jumpstarter
      test-command: "uv run pytest --tb=short"
      use-container: true  # Use pre-built CI containers for faster builds

  # === BUILDING JOBS ===

  # Go components
  controller-build:
    needs: [detect-changes, build-containers]
    if: >
      always() &&
      (needs.detect-changes.outputs.go == 'true' ||
       needs.detect-changes.outputs.ci == 'true' ||
       github.event_name == 'workflow_dispatch') &&
      (needs.build-containers.result == 'success' ||
       needs.build-containers.result == 'skipped')
    uses: ./.github/workflows/reusable-go-build.yml
    with:
      working-directory: core/controller
      binary-name: manager
      cmd-package: "./cmd"
      build-flags: '-ldflags "-s -w"'
      use-container: true  # Use pre-built CI containers for faster builds
      version: ${{ needs.detect-changes.outputs.version }}

  lab-config-build:
    needs: [detect-changes, build-containers]
    if: >
      always() &&
      (needs.detect-changes.outputs.go == 'true' ||
       needs.detect-changes.outputs.ci == 'true' ||
       github.event_name == 'workflow_dispatch') &&
      (needs.build-containers.result == 'success' ||
       needs.build-containers.result == 'skipped')
    uses: ./.github/workflows/reusable-go-build.yml
    with:
      working-directory: lab-config
      binary-name: lab-config
      use-container: true  # Use pre-built CI containers for faster builds
      version: ${{ needs.detect-changes.outputs.version }}

  # Rust components (combined lint and build)
  rust-lint-and-build:
    needs: [detect-changes, build-containers]
    if: >
      always() &&
      (needs.detect-changes.outputs.rust == 'true' ||
       needs.detect-changes.outputs.ci == 'true' ||
       github.event_name == 'workflow_dispatch') &&
      (needs.build-containers.result == 'success' ||
       needs.build-containers.result == 'skipped')
    uses: ./.github/workflows/reusable-rust-build.yml
    with:
      working-directory: hardware/dutlink-firmware
      targets: thumbv7em-none-eabihf
      skip-tests: true
      clippy-flags: "--all-features"
      clippy-warnings: "warn"
      use-container: true  # Use pre-built CI containers for faster builds

  # Web components (Node.js/TypeScript)
  web-build:
    needs: [detect-changes, build-containers]
    if: >
      always() &&
      (needs.detect-changes.outputs.web == 'true' ||
       needs.detect-changes.outputs.ci == 'true' ||
       github.event_name == 'workflow_dispatch') &&
      (needs.build-containers.result == 'success' ||
       needs.build-containers.result == 'skipped')
    uses: ./.github/workflows/reusable-web-build.yml
    with:
      working-directory: integrations/vscode
      package-manager: pnpm
      build-command: pnpm run compile
      test-command: echo "Tests skipped - VSCode extension tests require GUI environment"
      lint-command: pnpm run lint
      use-container: true  # Use pre-built CI containers for faster builds

  # === DOCUMENTATION & INTEGRATION TESTS ===

  # Documentation build
  docs-build:
    needs: detect-changes
    if: >
      needs.detect-changes.outputs.docs == 'true' ||
      needs.detect-changes.outputs.ci == 'true' ||
      github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Install documentation dependencies
        run: |
          uv pip install --system mkdocs mkdocs-material

      - name: Build documentation
        run: mkdocs build --strict

      - name: Deploy documentation (main branch only)
        if: >
          github.ref == 'refs/heads/main' &&
          github.event_name == 'push' &&
          !env.ACT
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email \
            "github-actions[bot]@users.noreply.github.com"
          mkdocs gh-deploy --force

  # End-to-end tests (run after all component builds pass)
  e2e-tests:
    needs: [python-test, controller-build, lab-config-build]
    if: >
      always() &&
      (needs.python-test.result == 'success' ||
       needs.python-test.result == 'skipped') &&
      (needs.controller-build.result == 'success' ||
       needs.controller-build.result == 'skipped') &&
      (needs.lab-config-build.result == 'success' ||
       needs.lab-config-build.result == 'skipped')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Install dependencies
        run: uv sync

      - name: Run end-to-end tests
        working-directory: testing/e2e
        run: |
          if [ -f "run-tests.sh" ]; then
            bash run-tests.sh
          else
            echo "No e2e tests found, skipping"
          fi

  # Create automatic release for main branch pushes after all tests pass
  automatic-release:
    needs: [
      detect-changes,
      python-test,
      controller-build,
      lab-config-build,
      rust-lint-and-build,
      web-build,
      docs-build,
      e2e-tests
    ]
    permissions:
      contents: write      # Required for creating releases and uploading assets
      packages: write      # Required for publishing container images
    if: >
      github.ref == 'refs/heads/main' &&
      github.event_name == 'push' &&
      always() &&
      (needs.detect-changes.result == 'success') &&
      (needs.python-test.result == 'success' || needs.python-test.result == 'skipped') &&
      (needs.controller-build.result == 'success' || needs.controller-build.result == 'skipped') &&
      (needs.lab-config-build.result == 'success' || needs.lab-config-build.result == 'skipped') &&
      (needs.rust-lint-and-build.result == 'success' || needs.rust-lint-and-build.result == 'skipped') &&
      (needs.web-build.result == 'success' || needs.web-build.result == 'skipped') &&
      (needs.docs-build.result == 'success' || needs.docs-build.result == 'skipped') &&
      (needs.e2e-tests.result == 'success' || needs.e2e-tests.result == 'skipped')
    uses: ./.github/workflows/reusable-release.yml
    with:
      version: ${{ needs.detect-changes.outputs.version }}
      version_tag: ${{ needs.detect-changes.outputs.version-tag }}
      ci_run_id: "${{ github.run_id }}"
    secrets: inherit
