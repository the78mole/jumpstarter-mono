name: Performance Analysis

on:
  pull_request:
    paths:
      - "core/jumpstarter/**"
      - "core/controller/**"
      - "hardware/dutlink-firmware/**"
  schedule:
    - cron: "0 6 * * 1" # Weekly on Monday
  workflow_dispatch:

jobs:
  # Analyze build performance and cache efficiency
  build-performance:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component:
          - name: python
            path: core/jumpstarter
            setup-cmd: "uv sync"
            build-cmd: "uv build packages/jumpstarter"
            cache-paths: |
              ~/.cache/uv
              .venv
          - name: go-controller
            path: core/controller
            setup-cmd: "go mod download"
            build-cmd: "make build"
            cache-paths: |
              ~/go/pkg/mod
              ~/.cache/go-build
          - name: go-lab-config
            path: lab-config
            setup-cmd: "go mod download"
            build-cmd: "go build ./..."
            cache-paths: |
              ~/go/pkg/mod
              ~/.cache/go-build
          - name: rust-application
            path: hardware/dutlink-firmware/application
            setup-cmd: "cargo fetch"
            build-cmd: "cargo build --release"
            cache-paths: |
              ~/.cargo/registry
              ~/.cargo/git
              target
          - name: rust-bootloader
            path: hardware/dutlink-firmware/bootloader
            setup-cmd: "cargo fetch"
            build-cmd: "cargo build --release"
            cache-paths: |
              ~/.cargo/registry
              ~/.cargo/git
              target
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python environment
        if: startsWith(matrix.component.name, 'python')
        run: pip install uv

      - name: Setup Go environment
        if: startsWith(matrix.component.name, 'go-')
        uses: actions/setup-go@v4
        with:
          go-version: "1.22"

      - name: Setup Rust environment
        if: startsWith(matrix.component.name, 'rust-')
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          target: thumbv7em-none-eabihf

      - name: Check cache hit rate (before)
        id: cache-before
        uses: actions/cache@v4
        with:
          path: ${{ matrix.component.cache-paths }}
          key: perf-${{ matrix.component.name }}-${{ runner.os }}-${{ hashFiles(format('{0}/**/pnpm-lock.yaml', matrix.component.path), format('{0}/**/go.sum', matrix.component.path), format('{0}/**/Cargo.lock', matrix.component.path), format('{0}/**/uv.lock', matrix.component.path)) }}
          restore-keys: |
            perf-${{ matrix.component.name }}-${{ runner.os }}-

      - name: Measure setup time
        working-directory: ${{ matrix.component.path }}
        run: |
          echo "SETUP_START=$(date +%s)" >> $GITHUB_ENV
          ${{ matrix.component.setup-cmd }}
          echo "SETUP_END=$(date +%s)" >> $GITHUB_ENV

      - name: Measure build time (cold)
        if: steps.cache-before.outputs.cache-hit != 'true'
        working-directory: ${{ matrix.component.path }}
        run: |
          echo "BUILD_COLD_START=$(date +%s)" >> $GITHUB_ENV
          ${{ matrix.component.build-cmd }}
          echo "BUILD_COLD_END=$(date +%s)" >> $GITHUB_ENV

      - name: Clean for warm build test
        if: steps.cache-before.outputs.cache-hit == 'true'
        working-directory: ${{ matrix.component.path }}
        run: |
          case "${{ matrix.component.name }}" in
            python)
              rm -rf dist/ build/ *.egg-info/
              ;;
            go-*)
              go clean -cache -modcache -testcache || true
              make clean || true
              ;;
            rust-*)
              cargo clean --release
              ;;
          esac

      - name: Measure build time (warm)
        if: steps.cache-before.outputs.cache-hit == 'true'
        working-directory: ${{ matrix.component.path }}
        run: |
          echo "BUILD_WARM_START=$(date +%s)" >> $GITHUB_ENV
          ${{ matrix.component.build-cmd }}
          echo "BUILD_WARM_END=$(date +%s)" >> $GITHUB_ENV

      - name: Calculate metrics
        run: |
          setup_time=$((SETUP_END - SETUP_START))

          if [ -n "$BUILD_COLD_START" ]; then
            build_time=$((BUILD_COLD_END - BUILD_COLD_START))
            cache_status="MISS"
          else
            build_time=$((BUILD_WARM_END - BUILD_WARM_START))
            cache_status="HIT"
          fi

          total_time=$((setup_time + build_time))

          echo "## Performance Metrics - ${{ matrix.component.name }}" >> $GITHUB_STEP_SUMMARY
          echo "- Setup time: ${setup_time}s" >> $GITHUB_STEP_SUMMARY
          echo "- Build time: ${build_time}s" >> $GITHUB_STEP_SUMMARY
          echo "- Total time: ${total_time}s" >> $GITHUB_STEP_SUMMARY
          echo "- Cache status: ${cache_status}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

  # Test parallel build efficiency
  parallel-build-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python tools
        run: pip install uv

      - name: Setup Go tools
        uses: actions/setup-go@v4
        with:
          go-version: "1.22"

      - name: Setup Rust tools
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          target: thumbv7em-none-eabihf

      - name: Setup Node.js tools
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Setup caches
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            ~/.cache/go-build
            ~/go/pkg/mod
            ~/.cargo/registry
            ~/.cargo/git
            ~/.pnpm-store
          key: parallel-build-${{ runner.os }}-${{ hashFiles('**/uv.lock', '**/go.sum', '**/Cargo.lock', '**/pnpm-lock.yaml') }}
          restore-keys: |
            parallel-build-${{ runner.os }}-

      - name: Sequential build test
        run: |
          echo "SEQUENTIAL_START=$(date +%s)" >> $GITHUB_ENV

          # Build each component sequentially - using absolute paths from workspace root
          (cd core/jumpstarter && uv sync && uv build packages/jumpstarter)
          (cd core/controller && make build)
          (cd lab-config && go build ./...)
          (cd hardware/dutlink-firmware/application && cargo build --release)
          (cd hardware/dutlink-firmware/bootloader && cargo build --release)
          (cd integrations/vscode && pnpm install && pnpm run compile)

          echo "SEQUENTIAL_END=$(date +%s)" >> $GITHUB_ENV

      - name: Clean for parallel test
        run: |
          # Clean builds - using absolute paths from workspace root
          (cd core/jumpstarter && rm -rf dist/ build/ *.egg-info/)
          (cd core/controller && make clean || true)
          (cd lab-config && go clean -cache || true)
          (cd hardware/dutlink-firmware/application && cargo clean || true)
          (cd hardware/dutlink-firmware/bootloader && cargo clean || true)
          (cd integrations/vscode && rm -rf out/ node_modules/ || true)

      - name: Parallel build test
        run: |
          echo "PARALLEL_START=$(date +%s)" >> $GITHUB_ENV

          # Build components in parallel using background jobs
          (cd core/jumpstarter && uv sync && uv build packages/jumpstarter) &
          (cd core/controller && make build) &
          (cd lab-config && go build ./...) &
          (cd hardware/dutlink-firmware/application && cargo build --release) &
          (cd hardware/dutlink-firmware/bootloader && cargo build --release) &
          (cd integrations/vscode && pnpm install && pnpm run compile) &

          # Wait for all jobs to complete
          wait

          echo "PARALLEL_END=$(date +%s)" >> $GITHUB_ENV

      - name: Compare build times
        run: |
          sequential_time=$((SEQUENTIAL_END - SEQUENTIAL_START))
          parallel_time=$((PARALLEL_END - PARALLEL_START))
          improvement=$((sequential_time - parallel_time))
          percentage=$(((improvement * 100) / sequential_time))

          echo "## Parallel Build Performance" >> $GITHUB_STEP_SUMMARY
          echo "- Sequential build: ${sequential_time}s" >> $GITHUB_STEP_SUMMARY
          echo "- Parallel build: ${parallel_time}s" >> $GITHUB_STEP_SUMMARY
          echo "- Time saved: ${improvement}s (${percentage}%)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

  # Analyze dependency sizes and cache efficiency
  dependency-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python tools
        run: pip install uv

      - name: Setup Go tools
        uses: actions/setup-go@v4
        with:
          go-version: "1.22"

      - name: Setup Rust tools
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          target: thumbv7em-none-eabihf

      - name: Setup Node.js tools
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Analyze Python dependencies
        run: |
          pip install uv
          cd core/jumpstarter
          uv sync

          echo "## Dependency Analysis" >> $GITHUB_STEP_SUMMARY
          echo "### Python Dependencies" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          # Check for .venv in current directory or parent directory
          if [ -d ".venv" ]; then
            du -sh .venv/ >> $GITHUB_STEP_SUMMARY
          elif [ -d "../../.venv" ]; then
            du -sh ../../.venv/ >> $GITHUB_STEP_SUMMARY
          else
            echo "Virtual environment not found" >> $GITHUB_STEP_SUMMARY
          fi
          uv pip list | wc -l | xargs echo "Packages installed:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: Analyze Go dependencies
        run: |
          cd core/controller
          go mod download
          echo "### Go Dependencies (controller)" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          du -sh ~/go/pkg/mod/ >> $GITHUB_STEP_SUMMARY
          go list -m all | wc -l | xargs echo "Modules:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: Analyze Rust dependencies
        run: |
          cd hardware/dutlink-firmware/application
          cargo fetch
          echo "### Rust Dependencies (Application)" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          du -sh ~/.cargo/registry/ >> $GITHUB_STEP_SUMMARY
          cargo tree --depth 1 | wc -l | xargs echo "Direct dependencies:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

          cd ../bootloader
          cargo fetch
          echo "### Rust Dependencies (Bootloader)" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          cargo tree --depth 1 | wc -l | xargs echo "Direct dependencies:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: Analyze Node.js dependencies
        run: |
          cd integrations/vscode
          pnpm install
          echo "### Node.js Dependencies" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          du -sh node_modules/ >> $GITHUB_STEP_SUMMARY
          pnpm list --depth=0 | grep -c "├\|└" | xargs echo "Packages:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
